# –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
import telebot
from telebot import types
from telebot.storage import StateMemoryStorage
from states_machine import RateStates, MainMenue, FormOrder
from utils import construct_translator
from config import *
from datetime import datetime
from pytz import timezone
import rates_funcs as rates_funcs
import math
import httplib2
import apiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials
from gs_write_funcs import write_feedback, add_row, write_contact, log_action, calculate_indexes, add_border, \
    write_pending_order, write_language, scrab_contact_list, update_contact, write_update_contacts, gs_write_usdrub_eurrub, get_city_commission
from tron_risk import *
import random
import string
import os
from trans_history import get_trans_history_ref, get_trans_history_disc, get_trans_history, check_status, get_bonus_history, get_logs_history, \
    create_deals_xlsx, create_contacts_report_for_split_xlsx, create_deals_report_for_split_xlsx, get_last24h_trans, gs_write_close_order
from last_trans import get_last_trans
from gs_balance import check_balance, cards_balance
from google_drive_managment import upload_image_to_google_drive
import time
from apscheduler.schedulers.background import BackgroundScheduler
#from apscheduler.schedulers.blocking import BlockingScheduler
import re
import json
import traceback
import gettext


# rates_funcs.get_rates_data('tima')

### –ë–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

from utils import _


# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
get_user_translator = construct_translator()
###


try:
# ----------------------------------------------------------------------
    GROUP_CHAT_ID = -942693297 #942693297 - Alpha 917301290 - test
    state_storage = StateMemoryStorage()
    bot = telebot.TeleBot(ACCESS_TOKEN, state_storage=state_storage)
    tz = timezone('Europe/Podgorica')  # –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—é
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ RUB_EUR (RE)
    OPER_NAME_RE = ''
    BANK_RE = ''
    SUM_EUR_RE = None  # –≤–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    SUM_RUB_RE = None  # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ rates_funcs
    RUB_EURO_RATE = None
    CITY_RE = None
    ORDER_TIME_RE = None
    ORDER_TIME_UE = None
    REF_CODE_RE = None
    DISCOUNT_RE = None  # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∏–¥–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    DISCOUNT_UE = None
    RUB_INFO = None  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã RUB_EURO –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ GSH
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ USDT_EUR (UE)
    OPER_NAME_UE = ''
    SUM_EUR_UE = None  # –≤–≤–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    BLOCKCHAIN = None
    ADDRESS = None
    SUM_USDT_UE = None  # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ rates_funcs
    RISK_TRC = None
    USDT_EURO_RATE = None
    CITY_UE = None
    REF_CODE_UE = None
    USDT_EURO_RATE_GS = None
    # –§–ª–∞–≥–∏ –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫
    RATES_FLAG = False
    START_FLAG = False
    #FORM_ORDER_FLAG = False
    OPER_FLAG_EUR_RUB = False
    OPER_FLAG_EUR_RUB_BACK = False
    OPER_FLAG_USDT_EURO_BACK = False
    OPER_FLAG_USDT_EURO = False
    BANK_FLAG = False
    SUM_RUB_FLAG = False
    SUM_USDT_FLAG = False
    CITY_RE_FLAG = False
    CITY_UE_FLAG = False
    ANOTHER_CITY_RE_FLAG = False
    ANOTHER_CITY_UE_FLAG = False
    ORDER_CONFIRM_RE_FLAG = False
    ORDER_CONFIRM_UE_FLAG = False
    FIND_USER_FLAG = False
    NAME_FLAG = False
    LANGUAGE_FLAG = False
    FEEDBACK_FLAG = False  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û—Å–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
    REFERRAL_FLAG = False  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ë–æ–Ω—É—Å–Ω–∞—è –±—Ä–æ–≥—Ä–∞–º–º–∞"
    MESSAGE_FLAG = False
    USER_OWNER = False
    CREATE_FLAG = False
    SEX_FLAG = False
    CITY_FLAG = False
    USER_STATUS_FLAG = False
    REFERRAL_OPTIONS_FLAG = False
    REFERRAL_CHARGES_FLAG = False # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ —Ä–µ—Ñ –∫–æ–¥—É
    REFERRAL_HIST_FLAG = False # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ —Ä–µ—Ñ –∫–æ–¥—É
    REFERRAL_PERIOD_FLAG = False
    DISCONT_PERIOD_FLAG = False
    PENDING_ORDER_FLAG = False
    DOCS_FLAG = False  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /documents
    CASH_FLAG = False  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏. –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–ª–∞–≥ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ form_order
    CASH_CITY = ''  # –∫–æ–≥–¥–∞ CASH_FLAG –ø–µ—Ä–µ–∫–ª—é—á–∏–º –Ω–∞ True, –µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CASH_CITY –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤–Ω–µ—Å–µ–Ω–∏—è —Ä—É–±–ª–µ–π (–ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è)
    ORDER_TIME_FLAG_RE = False  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏ RUB-EUR
    FRIEND_REF_FLAG_RE = False  # –ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥—Ä—É–≥–∞, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π
    RES_ORDER_FLAG_RE = False  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ True, –∫–æ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–¥ —Ä–µ—Ñ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥–≤—Ç–µ—Ä–∂–¥–µ–Ω–∏–µ
    ORDER_TIME_FLAG_UE = False  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–¥–µ–ª–∫–∏ USDT-EUR
    FRIEND_REF_FLAG_UE = False  # –ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥—Ä—É–≥–∞, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π
    RES_ORDER_FLAG_UE = False  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ True, –∫–æ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–æ–¥ —Ä–µ—Ñ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥–≤—Ç–µ—Ä–∂–¥–µ–Ω–∏–µ
    ADMIN_FLAG = False
    message_city = []
    message_sex = []
    message_user_status = []
    message_last_trans = []
    message_user_owner = []
    MAIN_MENU_BUTTONS = [_('üîÅ –û–±–º–µ–Ω –ø–æ –∑–∞—è–≤–∫–µ'), _('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'), _('üí∏ –ù–∞—à–∏ –∫—É—Ä—Å—ã'), _('üìò –î–æ–∫—É–º–µ–Ω—Ç—ã'),
                        _('üë®‚Äçüë¶‚Äçüë¶ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'), _('‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã'), _('üïõ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫'), _('üì® –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'), _('üìΩ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ')]
    CITY_BUTTONS = [_('–ë–∞—Ä'), _('–ë–µ—á–∏—á–∏'), _('–ë—É–¥–≤–∞'), _('–ö–æ—Ç–æ—Ä'), _('–ü–µ—Ç—Ä–æ–≤–∞—Ü'), _('–ü–æ–¥–≥–æ—Ä–∏—Ü–∞'), _('–¢–∏–≤–∞—Ç'),
                    _('–£–ª—å—Ü–∏–Ω—å'), _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–¶–µ—Ç–∏–Ω–µ'), _('–î—Ä—É–≥–∞—è –ª–æ–∫–∞—Ü–∏—è')]
    CITY_CASH_BUTTONS = [_('–ú–æ—Å–∫–≤–∞'), _('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'), _('–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'), _('–í–æ–ª–≥–æ–≥—Ä–∞–¥'), _('–í–æ—Ä–æ–Ω–µ–∂'), _('–ì—Ä–æ–∑–Ω—ã–π'), _('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'), _('–ò—Ä–∫—É—Ç—Å–∫'), _('–ö–∞–∑–∞–Ω—å'),
                    _('–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'), _('–ú–∞—Ö–∞—á–∫–∞–ª–∞'), _('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'), _('–û–º—Å–∫'), _('–û—Ä–µ–Ω–±—É—Ä–≥'), _('–ü—è—Ç–∏–≥–æ—Ä—Å–∫'), _('–†–æ—Å—Ç–æ–≤-–ù–∞-–î–æ–Ω—É'), _('–°–∞–º–∞—Ä–∞'), _('–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å'),
                     _('–°–æ—á–∏'), _('–°—É—Ä–≥—É—Ç'), _('–¢—é–º–µ–Ω—å'), _('–£—Ñ–∞'), _('–•–∞–±–∞—Ä–æ–≤—Å–∫'), _('–ß–µ–ª—è–±–∏–Ω—Å–∫'), ('–î—Ä—É–≥–∞—è –ª–æ–∫–∞—Ü–∏—è')]
    ADMIN_MENU_BUTTONS = ['–û—Ç–∫—É–ø', '–°–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç', '–†–∞—Å—Ö–æ–¥—ã', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–µ–Ω–µ–≥', '–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–æ–≤', '–ë–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç', '–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫', '–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å']
    ADMIN_MENU_BUTTONS_EX = ['–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–æ–≤', '–í—ã–ø–ª–∞—Ç—ã –∏ –±–æ–Ω—É—Å—ã', '–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º', '–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å']
    mb = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    @bot.message_handler(commands=['admin'])
    def admin(message):
        bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
        if message.chat.id != GROUP_CHAT_ID:
            with open('contacts.json', 'r', encoding='utf8') as f:
                ACTIVE_CONTACT_LIST = json.load(f)
            username = '@' + message.chat.username if message.chat.username is not None else 'None'
            user_id = message.from_user.id
            all_users_id_type = [[user_info['user_ID'], user_info['ContactType'], user_info['CurrStatus'], user_info['ContactOwnerTG']] for user_info in ACTIVE_CONTACT_LIST.values()]
            for elem in all_users_id_type:
                if str(user_id) in elem and elem[1] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä', '–û–±–º–µ–Ω–Ω–∏–∫'] and elem[2] != '–ë–ª–æ–∫':
                    #global FORM_ORDER_FLAG, FEEDBACK_FLAG
                    #FORM_ORDER_FLAG, FEEDBACK_FLAG = False, False
                    global admin_sum, admin_cross_rate, admin_seller_nik, admin_city, admin_currency, bonus_flag, comment, operation, bank_acc
                    admin_sum, admin_cross_rate, admin_seller_nik, admin_city, admin_currency, comment, operation, bank_acc = None,  None, None, None, None, None, None, None
                    bonus_flag = False
                    global admin_deals_city, admin_deals_city_flag
                    admin_deals_city_flag = False
                    admin_deals_city = []
                    global ADMIN_FLAG, KURATOR_BONUS_FLAG
                    ADMIN_FLAG = True
                    KURATOR_BONUS_FLAG = False
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if elem[1] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                    markup.add(*menu_buttons)
                    mess = '<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞</b>'
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                    log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (admin)', '-')
                    break
                else:
                    pass
    @bot.message_handler(commands=['change_language'])
    def change_language(message):
        #global FORM_ORDER_FLAG, FEEDBACK_FLAG
        #FORM_ORDER_FLAG, FEEDBACK_FLAG = False, False
        _ = get_user_translator(message.from_user.id)
        global LANGUAGE_FLAG
        LANGUAGE_FLAG = True
        mess = _('<b>–°–º–µ–Ω–∞ —è–∑—ã–∫–∞</b>\n' \
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —è–∑—ã–∫\n')
        a = types.ReplyKeyboardRemove()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        b1 = types.KeyboardButton(_('RU'))
        b2 = types.KeyboardButton(_('EN'))
        b3 = types.KeyboardButton(_('SR'))
        markup.add(b1, b2, b3)
        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
    @bot.message_handler(commands=['feedback'])
    def feedback(message):
        if message.chat.id != GROUP_CHAT_ID:
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['FEEDBACK_FLAG'] = True
                data['FORM_ORDER_FLAG'] = False
            _ = get_user_translator(message.from_user.id)
            mess = _('<b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</b>\n\n' \
                    '–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!\n\n' \
                    '–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –∑–¥–µ—Å—å.\n\n')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            b1 = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            markup.add(b1)
            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (feedback)', '-')
    @bot.message_handler(commands=['trans_history'])
    def trans_history(message):
        if message.chat.id != GROUP_CHAT_ID:
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['FEEDBACK_FLAG'] = False
                data['FORM_ORDER_FLAG'] = False
            _ = get_user_translator(message.from_user.id)
            username = '@' + message.chat.username if message.chat.username is not None else 'None'
            res = False
            try:
                res = create_deals_xlsx(username, CITY_BUTTONS+CITY_CASH_BUTTONS, None)
                mess = '–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!' if res else '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º'
            except Exception as e:
                print('Exception: ' + str(e))
                mess = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            if res:
                with open('Deals.xlsx', 'rb') as doc:
                    bot.send_document(message.chat.id, doc)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
            markup.add(*menu_buttons)
            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ (trans_history)', '-')
    @bot.message_handler(commands=['refferal'])
    def refferal(message):
        if message.chat.id != GROUP_CHAT_ID:
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['FEEDBACK_FLAG'] = False
                data['FORM_ORDER_FLAG'] = False
                data['REFERRAL_FLAG'] = False
            _ = get_user_translator(message.from_user.id)
            #ACTIVE_CONTACT_LIST = scrab_contact_list()
            with open('contacts.json', 'r', encoding='utf8') as f:
                ACTIVE_CONTACT_LIST = json.load(f)
            a = types.ReplyKeyboardRemove()
            username = '@' + message.chat.username if message.chat.username is not None else 'None'
            user_id = message.from_user.id
            all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
            if (username in ACTIVE_CONTACT_LIST or user_id in all_user_ids) and ACTIVE_CONTACT_LIST[username][
                'CurrStatus'] == '–ê–∫—Ç–∏–≤–Ω—ã–π':
                user_info = ACTIVE_CONTACT_LIST[username]
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['REFERRAL_FLAG'] = True
                mess = _('–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∞ –∏–º–µ–Ω–Ω–æ:\n\n' \
                        '1) –ò—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤ –ø–æ –í–∞—à–µ–º—É <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É</b> –∏ <b>–¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É</b> –∫–æ–¥—É.\n\n' \
                        '2) –ò—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ –≤—ã–ø–ª–∞—Ç –ø–æ –í–∞—à–µ–º—É <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É</b> –∫–æ–¥—É.\n\n' \
                        '3) –û–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ <b>–ö–∞—Ä—Ç–µ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>.')
                b1 = types.KeyboardButton(_('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))
                b2 = types.KeyboardButton(_('–î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))
                b3 = types.KeyboardButton(_('–ö–∞—Ä—Ç–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã'))
                b4 = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b3, b2, b1, b4)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif (username in ACTIVE_CONTACT_LIST or user_id in all_user_ids) and ACTIVE_CONTACT_LIST[username][
                'CurrStatus'] != '–ê–∫—Ç–∏–≤–Ω—ã–π':
                mess = _('–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–µ—Å–ø–æ—Å—Ç–∞–≤–æ—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /contact_operator')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            else:
                mess = _('–í–∞–º –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –°–æ–≤–µ—Ä—à–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∫–æ–¥–∞')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (refferal)', '-')
    @bot.message_handler(commands=['tutorial'])
    def tutorial(message):
        if message.chat.id != GROUP_CHAT_ID:
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['FEEDBACK_FLAG'] = False
                data['FORM_ORDER_FLAG'] = False
                data['DOCS_FLAG'] = False
            _ = get_user_translator(message.from_user.id)
            mess = _(f"–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='{LINK_TUTORIAL}'>–û–ë–£–ß–ê–Æ–©–ï–ï –í–ò–î–ï–û</a>")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
            markup.add(*menu_buttons)
            bot.send_video(chat_id=message.chat.id,
                           video=open('C:/Users/admin/Documents/AlphaCapitalHowToBot1.mp4', 'rb'),
                           supports_streaming=True, width=1080, height=1920)
            #bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                       message.from_user.full_name, '–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ (tutorial)', '-')
    @bot.message_handler(commands=['start'])
    def start(message):
        if message.chat.id != GROUP_CHAT_ID:
            _ = get_user_translator(message.from_user.id)
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['START_FLAG'] = True
                bot.send_video(chat_id=message.chat.id,
                               video=open('C:/Users/admin/Documents/AlphaCapitalHowToBot1.mp4', 'rb'),
                               supports_streaming=True, width=1080, height=1920)
                mess = _('–ü—Ä–∏–≤–µ—Ç, <b>{first_name}!</b>\n\n' \
                        '–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–æ–≤.\n' \
                        '–ü–µ—Ä–µ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å –ø–æ–º–æ—â—å—é /help\n\n' \
                        'Call the /help commad if you want to change the bot language\n'
                        '<b><em>–î–ª—è –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∫—É—Ä—Å—ã –µ—â–µ –≤—ã–≥–æ–¥–Ω–µ–µ!</em></b>').format(
                    first_name=message.from_user.first_name)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                if username not in ACTIVE_CONTACT_LIST:
                    existed_disc_codes = [one_doc['Discount_Number'] for one_doc in ACTIVE_CONTACT_LIST.values()]
                    existed_ref_codes = [one_doc['Referral_Number'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Referral_Number' in one_doc]
                    while True:
                        s = string.ascii_lowercase + string.ascii_uppercase + string.digits
                        disc_code = ''.join(random.sample(s, 4))
                        ref_code = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
                        if disc_code not in existed_disc_codes and ref_code not in existed_ref_codes:
                            break
                    write_contact(TG_Contact=username, user_ID=message.from_user.id, NameSurname=message.from_user.full_name,
                                        AccTypeFROM='', CurrFROM='RUB',
                                        City='Alpha_TG_Bot', ContactType='–ö–ª–∏–µ–Ω—Ç', ContactDealer='Alpha_TG_Bot', CurrStatus='–ê–∫—Ç–∏–≤–Ω—ã–π',
                                        Discount_Number=disc_code, Referral_Number=ref_code)
                log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                        message.from_user.full_name, '–°—Ç–∞—Ä—Ç (start)', '-')
    @bot.message_handler(commands=['help'])
    def help(message):
        if message.chat.id != GROUP_CHAT_ID:
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['RATES_FLAG'] = False
                data['FORM_ORDER_FLAG'] = False
                data['FEEDBACK_FLAG'] = False
                data['DOCS_FLAG'] = False
            _ = get_user_translator(message.from_user.id)
            mess = _('<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n' \
                    '/form_order - <em>–û–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É –ø–æ –∑–∞—è–≤–∫–µ –≤ Telegram. –î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞</em>\n\n' \
                    '/contact_operator - <em>–û–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É –ø–æ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫' \
                    ' –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏</em>\n\n' \
                    '/get_rates - <em>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–æ–≤</em>\n\n' \
                    '/documents - <em>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</em>\n\n' \
                    '/refferal - <em>–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã</em>\n\n' \
                    '/feedback - <em>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è</em>\n\n' \
                    '/change_language - <em>–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫</em>')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
            markup.add(*menu_buttons)
            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–ö–æ–º–∞–Ω–¥—ã (help)', '-')
    @bot.message_handler(commands=['documents'])
    def documents(message):
        if message.chat.id != GROUP_CHAT_ID:
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['RATES_FLAG'] = False
                data['FORM_ORDER_FLAG'] = False
                data['FEEDBACK_FLAG'] = False
                data['DOCS_FLAG'] = False
            _ = get_user_translator(message.from_user.id)
            #ACTIVE_CONTACT_LIST = scrab_contact_list()
            with open('contacts.json', 'r', encoding='utf8') as f:
                ACTIVE_CONTACT_LIST = json.load(f)
            username = '@' + message.chat.username if message.chat.username is not None else 'None'
            user_id = message.from_user.id
            all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
            if (username in ACTIVE_CONTACT_LIST or user_id in all_user_ids) and ACTIVE_CONTACT_LIST[username][
                'CurrStatus'] != '–ê–∫—Ç–∏–≤–Ω—ã–π':
                mess = _('–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–µ—Å–ø–æ—Å—Ç–∞–≤–æ—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º /contact_operator')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            else:
                client_warning_mess = _(
                    '<b>–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç:</b>\n\n' \
                    "1. <a href='{LINK_PUB_OFFER}'>–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞</a>\n\n" \
                    "2. <a href='{LINK_OPER_RULES}'>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π P2P</a>\n\n" \
                    "3. <a href='{LINK_RATES}'>–¢–∞—Ä–∏—Ñ—ã AlphaCapital.Exchange</a>\n\n" \
                    "4. <a href='{LINK_DISC_PROG}'>–î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</a>\n\n" \
                    "5. <a href='{LINK_REF_PROG}'>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</a>\n\n" \
                    "6. <a href='{LINK_CONF_POL}'>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>\n\n" \
                    "7. <a href='{LINK_AML}'>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ AML</a>\n\n" \
                    "8. <a href='{LINK_BANK_RISC}'>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö –±–∞–Ω–∫.–∫–∞—Ä—Ç—ã</a>\n\n" \
                    "9. <a href='{LINK_RISK_WARNING}'>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞</a>\n" ).format(LINK_OPER_RULES=LINK_OPER_RULES,
                                                        LINK_RATES=LINK_RATES,
                                                        LINK_DISC_PROG=LINK_DISC_PROG,
                                                        LINK_REF_PROG=LINK_REF_PROG,
                                                        LINK_CONF_POL=LINK_CONF_POL,
                                                        LINK_AML=LINK_AML,
                                                        LINK_BANK_RISC=LINK_BANK_RISC,
                                                        LINK_RISK_WARNING=LINK_RISK_WARNING,
                                                        LINK_PUB_OFFER=LINK_PUB_OFFER)
                if DOCS_FLAG is True:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                    b1 = types.KeyboardButton(_('–î–∞'))
                    b2 = types.KeyboardButton(_('–ù–µ—Ç'))
                    markup.add(b1, b2)
                    bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                    markup.add(*menu_buttons)
                    bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–î–æ–∫—É–º–µ–Ω—Ç—ã (documents)', '-')
    @bot.message_handler(commands=['get_rates'])
    def get_rates(message):
        if message.chat.id != GROUP_CHAT_ID:
            start = datetime.now()
            #global bank_acc
            #bank_acc = None
            #global FORM_ORDER_FLAG
            #FORM_ORDER_FLAG = False
            #global FEEDBACK_FLAG
            #FEEDBACK_FLAG = False
            #global RATES_FLAG
            #RATES_FLAG = True
            _ = get_user_translator(message.from_user.id)
            #ACTIVE_CONTACT_LIST = scrab_contact_list()
            with open('contacts.json', 'r', encoding='utf8') as f:
                ACTIVE_CONTACT_LIST = json.load(f)
            a = types.ReplyKeyboardRemove()
            username = '@' + message.chat.username if message.chat.username is not None else 'None'
            user_id = message.from_user.id
            discount = ACTIVE_CONTACT_LIST[username]['Discount'] if username in ACTIVE_CONTACT_LIST else '0'
            all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
            if (username in ACTIVE_CONTACT_LIST or user_id in all_user_ids) and ACTIVE_CONTACT_LIST[username][
                'CurrStatus'] != '–ê–∫—Ç–∏–≤–Ω—ã–π':
                mess = _('–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–µ—Å–ø–æ—Å—Ç–∞–≤–æ—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º /contact_operator')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            else:
                bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['RATES_FLAG'] = True
                    data['FORM_ORDER_FLAG'] = False
                    data['bank_acc'] = None
                #RATES_FLAG = True
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton(_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û'))
                b2 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'))
                b3 = types.KeyboardButton(_('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'))
                b4 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'))
                b5 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'))
                b6 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'))
                b7 = types.KeyboardButton(_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'))
                markup.add(b1, b2, b3, b4, b5, b6, b7)
                mess1 = _('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å')
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
    @bot.message_handler(commands=['contact_operator'])
    def contact_operator(message):
        if message.chat.id != GROUP_CHAT_ID:
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['FEEDBACK_FLAG'] = False
                data['FORM_ORDER_FLAG'] = False
            _ = get_user_translator(message.from_user.id)
            client_mess = _('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.')
            from_id = message.from_user.id
            first_name = message.from_user.first_name
            username = '@' + message.chat.username if message.chat.username is not None else '-'
            date = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')
            # date = datetime.utcfromtimestamp(message.json['date']).strftime('%Y-%m-%d %H:%M:%S')
            # TODO: –ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨?
            operator_mess = '<em>–ò—Å—Ç–æ—á–Ω–∏–∫:</em> Alpha_TG_Bot\n' \
                            '<b>–°–í–Ø–ó–¨ –° –û–ü–ï–†–ê–¢–û–†–û–ú</b>\n' \
                            '<em>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</em> {first_name}\nID –∫–ª–∏–µ–Ω—Ç–∞: {from_id}\n' \
                            '<em>–ù–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:</em> {username}\n' \
                            '<em>–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:</em> {date}'.format(first_name=first_name, from_id=from_id,
                                                                                username=username, date=date)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
            markup.add(*menu_buttons)
            if '@' not in str(username):
                exc_mess = _(
                    '<b>–£ –í–∞—Å –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –Ω–µ –¥–∞—Å—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏. –ü—Ä–æ—Å—å–±–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, exc_mess, parse_mode='html', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, client_mess, parse_mode='html', reply_markup=markup)
                bot.send_message(GROUP_CHAT_ID, operator_mess, parse_mode='html')
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (contact_operator)', '-')
    @bot.message_handler(commands=['form_order'])
    def form_order(message):
        if message.chat.id != GROUP_CHAT_ID:
            _ = get_user_translator(message.from_user.id)
            #global FORM_ORDER_FLAG
            global OPER_FLAG_EUR_RUB, OPER_FLAG_EUR_RUB_BACK, OPER_FLAG_USDT_EURO, OPER_FLAG_USDT_EURO_BACK, BANK_FLAG, SUM_RUB_FLAG, SUM_USDT_FLAG, CITY_RE_FLAG, CITY_UE_FLAG, ANOTHER_CITY_RE_FLAG, ANOTHER_CITY_UE_FLAG, ORDER_CONFIRM_RE_FLAG, ORDER_CONFIRM_UE_FLAG, CHECK_ADDRESS, CHOOSE_BLOCKCHAIN
            global CASH_FLAG
            global FIND_USER_FLAG
            global NAME_FLAG
            global FEEDBACK_FLAG
            global REFERRAL_FLAG
            global MESSAGE_FLAG
            global USER_OWNER
            global CREATE_FLAG
            global SEX_FLAG
            global CITY_FLAG
            global USER_STATUS_FLAG
            #global FORM_ORDER_FLAG
            global ORDER_TIME_FLAG_RE
            global RUB_INFO
            global FRIEND_REF_FLAG_RE
            global DISCOUNT_RE
            global DISCOUNT_UE
            global RES_ORDER_FLAG_RE
            global ORDER_TIME_FLAG_UE
            global FRIEND_REF_FLAG_UE
            global RES_ORDER_FLAG_UE
            global REF_CDOE_UE, REF_CODE_RE
            global FEEDBACK_FLAG
            global add_username
            #global RATES_FLAG
            #RATES_FLAG = False
            FEEDBACK_FLAG = False
            PENDING_ORDER_FLAG = False
            RES_ORDER_FLAG_RE = False
            #FORM_ORDER_FLAG = True
            OPER_FLAG_EUR_RUB = False
            OPER_FLAG_EUR_RUB_BACK = False
            OPER_FLAG_USDT_EURO_BACK = False
            OPER_FLAG_USDT_EURO = False
            BANK_FLAG = False
            SUM_RUB_FLAG = False
            SUM_USDT_FLAG = False
            CHECK_ADDRESS = False
            CHOOSE_BLOCKCHAIN = False
            CITY_RE_FLAG = False
            CITY_UE_FLAG = False
            ANOTHER_CITY_RE_FLAG = False
            ANOTHER_CITY_UE_FLAG = False
            ORDER_CONFIRM_RE_FLAG = False
            ORDER_CONFIRM_UE_FLAG = False
            FIND_USER_FLAG = False
            ORDER_TIME_FLAG_UE = False
            FRIEND_REF_FLAG_UE = False
            RES_ORDER_FLAG_UE = False
            CASH_FLAG = False
            ORDER_TIME_FLAG_RE = False
            RUB_INFO = None
            FRIEND_REF_FLAG_RE = False
            DISCOUNT_RE = None
            DISCOUNT_UE = None
            REF_CODE_RE = None
            REF_CODE_UE = None
            add_username = ''
            #ACTIVE_CONTACT_LIST = scrab_contact_list()
            with open('contacts.json', 'r', encoding='utf8') as f:
                ACTIVE_CONTACT_LIST = json.load(f)
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['FORM_ORDER_FLAG'] = True
                data['RATES_FLAG'] = False
                data['FEEDBACK_FLAG'] = False
                data['PENDING_ORDER_FLAG'] = False
                data['RES_ORDER_FLAG_RE'] = False
                data['FORM_ORDER_FLAG'] = True
                data['OPER_FLAG_EUR_RUB'] = False
                data['OPER_FLAG_EUR_RUB_BACK'] = False
                data['OPER_FLAG_USDT_EURO_BACK'] = False
                data['OPER_FLAG_USDT_EURO'] = False
                data['BANK_FLAG'] = False
                data['SUM_RUB_FLAG'] = False
                data['SUM_USDT_FLAG'] = False
                data['CHECK_ADDRESS'] = False
                data['CHOOSE_BLOCKCHAIN'] = False
                data['CITY_RE_FLAG'] = False
                data['CITY_UE_FLAG'] = False
                data['ANOTHER_CITY_RE_FLAG'] = False
                data['ANOTHER_CITY_UE_FLAG'] = False
                data['ORDER_CONFIRM_RE_FLAG'] = False
                data['ORDER_CONFIRM_UE_FLAG'] = False
                data['FIND_USER_FLAG'] = False
                data['ORDER_TIME_FLAG_UE'] = False
                data['FRIEND_REF_FLAG_UE'] = False
                data['RES_ORDER_FLAG_UE'] = False
                data['CASH_FLAG'] = False
                data['ORDER_TIME_FLAG_RE'] = False
                data['RUB_INFO'] = None
                data['FRIEND_REF_FLAG_RE'] = False
                data['DISCOUNT_RE'] = None
                data['DISCOUNT_UE'] = None
                data['REF_CODE_RE'] = None
                data['REF_CODE_UE'] = None
                data['CASH_CITY'] = ''
            a = types.ReplyKeyboardRemove()
            username = '@' + message.chat.username if message.chat.username is not None else 'None'
            user_id = message.from_user.id
            all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
            if (username in ACTIVE_CONTACT_LIST or user_id in all_user_ids) and ACTIVE_CONTACT_LIST[username][
                'CurrStatus'] != '–ê–∫—Ç–∏–≤–Ω—ã–π':
                mess = _('–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–µ—Å–ø–æ—Å—Ç–∞–≤–æ—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º /contact_operator')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            else:
                mess = _('–ö–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n' \
                        '1. –û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û\n' \
                        '2. –û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û?\n' \
                        '3. –û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò\n' \
                        '4. –û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò\n' \
                        '5. –û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´\n' \
                        '6. –û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï\n' \
                        '7. –û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï\n\n' \
                        '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û'))
                b2 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'))
                b3 = types.KeyboardButton(_('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'))
                b4 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'))
                b5 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'))
                b6 = types.KeyboardButton(_('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'))
                b7 = types.KeyboardButton(_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'))
                markup.add(b1, b2, b3, b4, b5, b6, b7, mb)
                if '@' not in str(username):
                    exc_mess = _(
                        '<b>–£ –í–∞—Å –Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username), —á—Ç–æ –Ω–µ –¥–∞—Å—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏. –ü—Ä–æ—Å—å–±–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                    markup.add(*menu_buttons)
                    bot.send_message(message.chat.id, exc_mess, parse_mode='html', reply_markup=markup)
                else:
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–û–±–º–µ–Ω –ø–æ –∑–∞—è–≤–∫–µ (form_order)', '-')            
    @bot.message_handler(content_types=['photo'])
    def get_photo(message):
        with open('contacts.json', 'r', encoding='utf8') as f:
                ACTIVE_CONTACT_LIST = json.load(f)
        if ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and message.photo and message.text != '–û—Ç–º–µ–Ω–∞':
            file_id = message.photo[-1].file_id
            photo_info = bot.get_file(file_id)
            downloaded_photo = bot.download_file(photo_info.file_path)
            with open(f'documents/{admin_seller_nik}_{deal_id}.jpg', 'wb') as new_file:
                new_file.write(downloaded_photo)
            image_url = upload_image_to_google_drive(image_file_path = f'documents/{admin_seller_nik}_{deal_id}.jpg',
                                                     name = f'{admin_seller_nik}_{deal_id}.jpg',
                                                     credentials_path = 'files/alphaexchange-c7c913c383ee.json',
                                                     folder_id = None)
            mess = '–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            markup.add('–î–∞–ª–µ–µ')
            bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
    @bot.message_handler(content_types=['text'])
    def get_user_operation(message):
        _ = get_user_translator(message.from_user.id)
        with open('contacts.json', 'r', encoding='utf8') as f:
                ACTIVE_CONTACT_LIST = json.load(f)
        global BANK_RE, OPER_NAME_RE
        global OPER_FLAG_EUR_RUB, OPER_FLAG_EUR_RUB_BACK, OPER_FLAG_USDT_EURO, OPER_FLAG_USDT_EURO_BACK, BANK_FLAG, SUM_RUB_FLAG, ORDER_CONFIRM_RE_FLAG, ORDER_CONFIRM_UE_FLAG, SUM_USDT_FLAG, CHECK_ADDRESS, CHOOSE_BLOCKCHAIN
        global RUB_EURO_RATE, SUM_RUB_RE, SUM_EUR_RE
        global USDT_EURO_RATE, SUM_EUR_UE, SUM_USDT_UE
        global BLOCKCHAIN, ADDRESS, RISK_TRC
        global OPER_NAME_UE
        global CITY_RE, CITY_UE, CITY_RE_FLAG, CITY_UE_FLAG, ANOTHER_CITY_RE_FLAG, ANOTHER_CITY_UE_FLAG
        global DOCS_FLAG
        global PENDING_ORDER_FLAG
        global CASH_FLAG, CASH_CITY
        global FEEDBACK_FLAG
        global LANGUAGE_FLAG
        global REFERRAL_FLAG
        global MESSAGE_FLAG
        global USER_OWNER
        global CREATE_FLAG
        global SEX_FLAG
        global CITY_FLAG
        global USER_STATUS_FLAG
        global REFERRAL_OPTIONS_FLAG
        global REFERRAL_CHARGES_FLAG
        global REFERRAL_HIST_FLAG
        global REFERRAL_PERIOD_FLAG
        global DISCONT_PERIOD_FLAG
        global ORDER_TIME_FLAG_RE
        global ORDER_TIME_RE
        global ORDER_TIME_UE
        global RUB_INFO
        global FRIEND_REF_FLAG_RE
        global DISCOUNT_RE
        global DISCOUNT_UE
        global RES_ORDER_FLAG_RE
        global ORDER_TIME_FLAG_UE
        global FRIEND_REF_FLAG_UE
        global RES_ORDER_FLAG_UE
        global USDT_EURO_RATE_GS
        global REF_CODE_RE, REF_CODE_UE
        global FIND_USER_FLAG
        global NAME_FLAG
        global ADMIN_FLAG, KURATOR_BONUS_FLAG
        #global RATES_FLAG
        global add_username
        global admin_sum, deal_id, deal_id_dict, image_url, fact_get, fact_giv, end_flag, oper_type, admin_cross_rate, admin_seller_nik, admin_city, admin_currency, bonus_flag, comment, operation, bank_acc, admin_deals_city, admin_deals_city_flag
        cities = [_('–ë–∞—Ä'),
                _('–ë–µ—á–∏—á–∏'),
                _('–ë—É–¥–≤–∞'),
                _('–ö–æ—Ç–æ—Ä'),
                _('–ü–µ—Ç—Ä–æ–≤–∞—Ü'),
                _('–ü–æ–¥–≥–æ—Ä–∏—Ü–∞'),
                _('–¢–∏–≤–∞—Ç'),
                _('–£–ª—å—Ü–∏–Ω—å'),
                _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'),
                _('–¶–µ—Ç–∏–Ω–µ')
                ]
        bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
        ru_bank_names = [_('–°–±–µ—Ä–±–∞–Ω–∫'), _('–¢–∏–Ω—å–∫–æ—Ñ—Ñ'), _('–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω'), _('–ü—Ä–æ—á–∏–µ')]
        ua_bank_names = [_('Monobank'), _('PUMB'), _('–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫'), _('–ê-–ë–∞–Ω–∫'), _('Izibank')]
        kzt_bank_names = [_('Kaspi Bank'), _('Halyk Bank'), _('–¶–µ–Ω—Ç—Ä–ö—Ä–µ–¥–∏—Ç –ë–∞–Ω–∫'), _('Jysan Bank'), _('Forte Bank'), _('Altyn Bank'), _('Freedom Bank')]
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è /start
        if message.text == _('üîÅ –û–±–º–µ–Ω –ø–æ –∑–∞—è–≤–∫–µ') or message.text == _('–û–±–º–µ–Ω –ø–æ –∑–∞—è–≤–∫–µ'):
            form_order(message)
        elif message.text == _('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º') or message.text == _('–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'):
            contact_operator(message)
        elif message.text == _('üí∏ –ù–∞—à–∏ –∫—É—Ä—Å—ã') or message.text == _('–ù–∞—à–∏ –∫—É—Ä—Å—ã'):
            get_rates(message)
        elif message.text == _('üìò –î–æ–∫—É–º–µ–Ω—Ç—ã') or message.text == _('–î–æ–∫—É–º–µ–Ω—Ç—ã'):
            bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['DOCS_FLAG'] = False
            documents(message)
        elif message.text == _('üìΩ –û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ') or message.text == _('–û–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ'):
            tutorial(message)
        elif message.text == _('üë®‚Äçüë¶‚Äçüë¶ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞') or message.text == _('–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'):
            refferal(message)
        elif message.text == _('‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã') or message.text == _('–ö–æ–º–∞–Ω–¥—ã'):
            help(message)
        elif message.text == _('üïõ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫'):
            trans_history(message)
        elif message.text == _('–°—Ç–∞—Ä—Ç'):
            start(message)
        elif message.text == _('üì® –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤') or message.text == _('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'):
            feedback(message)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            ### –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
            if data.get('RATES_FLAG')==True and message.text in [_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û'), _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'), _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'), _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'), _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'), _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï')]:
                data['bank_acc'] = message.text
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                if message.text in [_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û'), _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'), _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'), _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï')]:
                    menu_buttons = form_menu_buttons(_(ru_bank_names))
                elif message.text in [_('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï')]:
                    menu_buttons = form_menu_buttons(_(kzt_bank_names))
                elif message.text in [_('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´')]:
                    menu_buttons = form_menu_buttons(_(ua_bank_names))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif data.get('RATES_FLAG')==True and (data['bank_acc'] is not None or message.text in [_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'), _('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û')]):
                if message.text in [_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û')]:
                    data['bank_acc'] = message.text
                start = datetime.now()
                a = types.ReplyKeyboardRemove()
                mess1 = _('<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...</em>')
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=a)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                discount = ACTIVE_CONTACT_LIST[username]['Discount'] if username in ACTIVE_CONTACT_LIST else '0'
                if data['bank_acc'] == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û'):
                    rates_data = rates_funcs.get_rates_data(username, message.text)
                    rub_euro_rate_499 = round(rates_data[499] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 500 –µ–≤—Ä–æ
                    rub_euro_rate_999 = round(rates_data[999] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 1000 –µ–≤—Ä–æ
                    rub_euro_rate_2999 = round(rates_data[2999] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 2999 –µ–≤—Ä–æ
                    rub_euro_rate_9999 = round(rates_data[9999] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 9999 –µ–≤—Ä–æ
                    rub_euro_rate_10001 = round(rates_data[10001] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 10001 –µ–≤—Ä–æ
                    mess2 = _('<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É </b>\n\n' \
                            '<em><b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b></em>\n\n' \
                            '{bank_name}\n'
                            '<b>üí≥ RUB(<em>–≤–∞—à–∏</em>) ‚û°Ô∏è EUR(<em>–Ω–∞—à–∏</em>) üí∂</b>\n' \
                            'üìç 100-499 EUR: {rub_euro_rate_499}\n' \
                            'üìç 500-999 EUR: {rub_euro_rate_999}\n' \
                            'üìç 1000-2999 EUR: {rub_euro_rate_2999}\n' \
                            'üìç 3000-9999 EUR: {rub_euro_rate_9999}\n' \
                            'üìç –æ—Ç 10000 EUR: {rub_euro_rate_10001}\n\n' \
                            '<b><em>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ' \
                            '–≤ –º–µ–Ω—é "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /refferal</em></b>\n\n').format(
                        bank_name=message.text,
                        rub_euro_rate_499=rub_euro_rate_499,
                        rub_euro_rate_999=rub_euro_rate_999,
                        rub_euro_rate_2999=rub_euro_rate_2999,
                        rub_euro_rate_9999=rub_euro_rate_9999,
                        rub_euro_rate_10001=rub_euro_rate_10001)
                elif data['bank_acc'] == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'):
                    rates_data_buy = rates_funcs.get_rates_buy_eur_data(currency_from='EUR_RUB', bank_name=message.text, username=username)
                    rub_euro_rate_buy_49999 = round(rates_data_buy[49999] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 500 –µ–≤—Ä–æ
                    rub_euro_rate_buy_99999 = round(rates_data_buy[99999] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 1000 –µ–≤—Ä–æ
                    rub_euro_rate_buy_299999 = round(rates_data_buy[299999] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 2999 –µ–≤—Ä–æ
                    rub_euro_rate_buy_999999 = round(rates_data_buy[999999] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 9999 –µ–≤—Ä–æ
                    rub_euro_rate_buy_1000001 = round(rates_data_buy[1000001] * (1 - float(discount.replace(',', '.')) / 100), 2) # –∫—É—Ä—Å –¥–æ 10001 –µ–≤—Ä–æ
                    mess2 = _('<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É </b>\n\n' \
                            '<em><b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b></em>\n\n' \
                            '{bank_name}\n'
                            '<b>üí∂ EUR=>RUB üí≥</b>\n' \
                            'üìå 100-499 EUR: {rub_euro_rate_buy_49999}\n' \
                            'üìå 500-999 EUR: {rub_euro_rate_buy_99999}\n' \
                            'üìå 1000-2999 EUR: {rub_euro_rate_buy_299999}\n' \
                            'üìå 3000-9999 EUR: {rub_euro_rate_buy_999999}\n' \
                            'üìå –æ—Ç 10000 EUR: {rub_euro_rate_buy_1000001}\n\n' \
                            '<b><em>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ' \
                            '–≤ –º–µ–Ω—é "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /refferal</em></b>\n\n').format(
                        bank_name=message.text,
                        rub_euro_rate_buy_49999=rub_euro_rate_buy_49999,
                        rub_euro_rate_buy_99999=rub_euro_rate_buy_99999,
                        rub_euro_rate_buy_299999=rub_euro_rate_buy_299999,
                        rub_euro_rate_buy_999999=rub_euro_rate_buy_999999,
                        rub_euro_rate_buy_1000001=rub_euro_rate_buy_1000001)
                elif data['bank_acc'] == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    rates_data = rates_funcs.get_rates_rub_kzt_data(username, message.text)
                    rub_euro_rate_499 = round(rates_data[249999] * (1 - float(discount.replace(',', '.')) / 100), 4) # –∫—É—Ä—Å –¥–æ 500 –µ–≤—Ä–æ
                    rub_euro_rate_999 = round(rates_data[499999] * (1 - float(discount.replace(',', '.')) / 100), 4) # –∫—É—Ä—Å –¥–æ 1000 –µ–≤—Ä–æ
                    rub_euro_rate_2999 = round(rates_data[1499999] * (1 - float(discount.replace(',', '.')) / 100), 4) # –∫—É—Ä—Å –¥–æ 2999 –µ–≤—Ä–æ
                    rub_euro_rate_9999 = round(rates_data[4999999] * (1 - float(discount.replace(',', '.')) / 100), 4) # –∫—É—Ä—Å –¥–æ 9999 –µ–≤—Ä–æ
                    rub_euro_rate_10001 = round(rates_data[5000000] * (1 - float(discount.replace(',', '.')) / 100), 4) # –∫—É—Ä—Å –¥–æ 10001 –µ–≤—Ä–æ
                    mess2 = _('<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É </b>\n\n' \
                            '<em><b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b></em>\n\n' \
                            '{bank_name}\n'
                            '<b>üí≥ RUB(<em>–≤–∞—à–∏</em>) ‚û°Ô∏è KZT(<em>–Ω–∞—à–∏</em>) üí≥</b>\n' \
                            'üìç 100-499 KZT: {rub_euro_rate_499}\n' \
                            'üìç 500-999 KZT: {rub_euro_rate_999}\n' \
                            'üìç 1000-2999 KZT: {rub_euro_rate_2999}\n' \
                            'üìç 3000-9999 KZT: {rub_euro_rate_9999}\n' \
                            'üìç –æ—Ç 10000 KZT: {rub_euro_rate_10001}\n\n' \
                            '<b><em>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ' \
                            '–≤ –º–µ–Ω—é "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /refferal</em></b>\n\n').format(
                        bank_name=message.text,
                        rub_euro_rate_499=rub_euro_rate_499,
                        rub_euro_rate_999=rub_euro_rate_999,
                        rub_euro_rate_2999=rub_euro_rate_2999,
                        rub_euro_rate_9999=rub_euro_rate_9999,
                        rub_euro_rate_10001=rub_euro_rate_10001)
                elif data['bank_acc'] == _('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'):
                    usdt_info = rates_funcs.compute_usdt_euro_amount(1, username)
                    usdt_euro_rate_1 = round(usdt_info['low_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å –¥–æ 5000 –µ–≤—Ä–æ
                    usdt_euro_rate_2 = round(usdt_info['high_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å —Å–≤—ã—à–µ 5000 –µ–≤—Ä–æ
                    mess2 = _('<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É </b>\n\n' \
                            '<em><b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b></em>\n\n' \
                            '<b>üíµ USDT=>EUR üí∂</b>\n' \
                            'üî∏ 100-4999 EUR: {usdt_euro_rate_1}\n' \
                            'üî∏ –æ—Ç 5000 EUR: {usdt_euro_rate_2}\n\n' \
                            '<b><em>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ' \
                            '–≤ –º–µ–Ω—é "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /refferal</em></b>\n\n').format(
                        usdt_euro_rate_1=usdt_euro_rate_1,
                        usdt_euro_rate_2=usdt_euro_rate_2)
                elif data['bank_acc'] == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'):
                    usdt_info = rates_funcs.compute_usdt_rub_amount(1, username, False, message.text)
                    usdt_euro_rate_1_buy = round(usdt_info['low_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å –¥–æ 5000 –µ–≤—Ä–æ
                    usdt_euro_rate_2_buy = round(usdt_info['high_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å —Å–≤—ã—à–µ 5000 –µ–≤—Ä–æ
                    mess2 = _('<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É </b>\n\n' \
                            '<em><b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b></em>\n\n' \
                            '{bank_name}\n'
                            '<b>üí∏ USDT=>RUB üí≥</b>\n' \
                            'üîπ 100-4999 USDT: {usdt_euro_rate_1_buy}\n' \
                            'üîπ –æ—Ç 5000 USDT: {usdt_euro_rate_2_buy}\n\n' \
                            '<b><em>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ' \
                            '–≤ –º–µ–Ω—é "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /refferal</em></b>\n\n').format(
                        bank_name=message.text,
                        usdt_euro_rate_1_buy=usdt_euro_rate_1_buy,
                        usdt_euro_rate_2_buy=usdt_euro_rate_2_buy)
                elif data['bank_acc'] == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    usdt_info = rates_funcs.compute_usdt_uah_amount(1, username, message.text)
                    usdt_euro_rate_1 = round(usdt_info['low_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å –¥–æ 5000 –µ–≤—Ä–æ
                    usdt_euro_rate_2 = round(usdt_info['high_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å —Å–≤—ã—à–µ 5000 –µ–≤—Ä–æ
                    mess2 = _('<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É </b>\n\n' \
                            '<em><b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b></em>\n\n' \
                            '{bank_name}\n'
                            '<b>üíµ USDT=>UAH üí≥</b>\n' \
                            'üî∏ 4000-200000 UAH: {usdt_euro_rate_1}\n' \
                            'üî∏ –æ—Ç 200000 UAH: {usdt_euro_rate_2}\n\n' \
                            '<b><em>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ' \
                            '–≤ –º–µ–Ω—é "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /refferal</em></b>\n\n').format(
                        bank_name=message.text,
                        usdt_euro_rate_1=usdt_euro_rate_1,
                        usdt_euro_rate_2=usdt_euro_rate_2)
                elif data['bank_acc'] == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    usdt_info = rates_funcs.compute_usdt_kzt_amount(1, username, message.text)
                    usdt_euro_rate_1 = round(usdt_info['low_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å –¥–æ 5000 –µ–≤—Ä–æ
                    usdt_euro_rate_2 = round(usdt_info['high_rate'] * (1 - float(discount.replace(',', '.')) / 100), 3)  # –∫—É—Ä—Å —Å–≤—ã—à–µ 5000 –µ–≤—Ä–æ
                    mess2 = _('<b>–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ –≤–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É </b>\n\n' \
                            '<em><b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b></em>\n\n' \
                            '{bank_name}\n'
                            '<b>üíµ USDT=>KZT üí≥</b>\n' \
                            'üî∏ 50000-2500000 KZT: {usdt_euro_rate_1}\n' \
                            'üî∏ –æ—Ç 2500000 KZT: {usdt_euro_rate_2}\n\n' \
                            '<b><em>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π ' \
                            '–≤ –º–µ–Ω—é "–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /refferal</em></b>\n\n').format(
                        bank_name=message.text,
                        usdt_euro_rate_1=usdt_euro_rate_1,
                        usdt_euro_rate_2=usdt_euro_rate_2)
                data['bank_acc'] = None
                #RATES_FLAG = False
                bot.set_state(message.from_user.id, MainMenue.main_menue, message.chat.id)
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['RATES_FLAG'] = False
                    data['bank_acc'] = None
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess2, parse_mode='html', reply_markup=markup)
                end = datetime.now()
                print(f"Time taken in (hh:mm:ss.ms) is {end - start}")
                log_action(datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S'), message.from_user.username, message.from_user.id,
                    message.from_user.full_name, '–ù–∞—à–∏ –∫—É—Ä—Å—ã (get_rates)', '-')
            ### –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            elif ADMIN_FLAG and message.text == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫':
                end_flag = False
                fact_giv = None
                fact_get = None
                comment = None
                oper_type = None
                image_url = ''
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                operation = '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫'
                markup.add('–ö—É—Ä–∞—Ç–æ—Ä').add('P2P').add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and message.text in ['–ö—É—Ä–∞—Ç–æ—Ä', 'P2P']:
                last24 = get_last24h_trans(curator_type=message.text)
                deal_id_dict = last24[0]
                deals_mess = last24[1]
                if not deal_id_dict:
                    operation = None
                    mess = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫'
                    username = '@' + message.chat.username if message.chat.username is not None else 'None'
                    menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(*menu_buttons)
                else:
                    admin_seller_nik = message.text
                    mess = '–í—ã–±–µ—Ä–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏\n\n' + deals_mess
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                    markup.add(*list(deal_id_dict.values())).add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and re.compile(r'^EX\d{8}$').match(message.text):
                deal_id = message.text
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–¥–µ–ª–∫–æ–π'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                markup.add('–ó–∞–∫—Ä—ã—Ç—å').add('–û—Ç–º–µ–Ω–∏—Ç—å').add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and message.text in ['–ó–∞–∫—Ä—ã—Ç—å'] and message.text != '–û—Ç–º–µ–Ω–∞':
                oper_type = '–ó–∞–∫—Ä—ã—Ç—å'
                mess = '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É –≤ –æ—Ç–¥–∞–≤–∞–µ–º–æ–π –≤–∞–ª—é—Ç–µ'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                markup.add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and message.text.isdigit() and fact_giv is None and message.text != '–û—Ç–º–µ–Ω–∞':
                fact_giv = message.text
                mess = '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É –≤ –ø–æ–ª—É—á–∞–µ–º–æ–π –≤–∞–ª—é—Ç–µ'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                end_flag = True
                markup.add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and message.text == '–û—Ç–º–µ–Ω–∏—Ç—å' and message.text != '–û—Ç–º–µ–Ω–∞':
                oper_type = '–û—Ç–º–µ–Ω–∏—Ç—å'
                fact_get = ''
                fact_giv = ''
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                end_flag = True
                buttons_list = ['–ë–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ–±–º–µ–Ω', '–ö–ª–∏–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π', '–£–≤–µ–ª–∏—á–∏–ª—Å—è –∫—É—Ä—Å –æ–±–º–µ–Ω–∞, –æ—Ç–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞',
                                '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–æ—Å–æ–±–æ–º –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞', '–ù–µ –≤—ã—à–µ–ª –Ω–∞ —Å–≤—è–∑—å', '–û—Ç–º–µ–Ω–∞ –≤ —Å—á–µ—Ç –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏', '–û—Ç–º–µ–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫—É—Ä–∞—Ç–æ—Ä–∞']
                markup.add(*buttons_list).add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and end_flag and message.text != '–û—Ç–º–µ–Ω–∞' and message.text != '–î–∞–ª–µ–µ':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                if oper_type == '–û—Ç–º–µ–Ω–∏—Ç—å':
                    comment = message.text
                else:
                    fact_get = message.text
                    comment = ''
                mess = '–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"'
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                end_flag = True
                markup.add('–î–∞–ª–µ–µ').add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫' and message.text == '–î–∞–ª–µ–µ' and message.text != '–û—Ç–º–µ–Ω–∞':
                status = '–û—Ç–º–µ–Ω–µ–Ω–∞' if oper_type == '–û—Ç–º–µ–Ω–∏—Ç—å' else '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                gs_write_close_order(deal_id_dict, deal_id, username, fact_giv, fact_get, image_url, status, comment)
                mess = '–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞'
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º' and ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactType'] == '–ü–∞—Ä—Ç–Ω–µ—Ä':
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                admin_seller_nik = '–í—ã–±–æ—Ä'
                markup.add('SPLIT-1').add('SPLIT-2').add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and (message.text == '–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º' and ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactOwnerTG'] in ['SPLIT-1', 'SPLIT-2'] or admin_seller_nik == '–í—ã–±–æ—Ä'):
                if admin_seller_nik == '–í—ã–±–æ—Ä':
                    admin_seller_nik = message.text
                else:
                    admin_seller_nik = ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactOwnerTG']
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—É—á–∏—Ç—å'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                markup.add('–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤').add('–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫').add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text in ['–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', '–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫'] and admin_seller_nik in ['SPLIT-1', 'SPLIT-2']:
                mess = '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST['@'+ message.chat.username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup.add(*menu_buttons)
                if message.text == '–°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫':
                    res = create_deals_report_for_split_xlsx(admin_seller_nik)
                else:
                    res = create_contacts_report_for_split_xlsx(admin_seller_nik)
                if res:
                    with open('Contacts.xlsx', 'rb') as doc:
                        bot.send_document(message.chat.id, doc)
                    
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å':
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                markup.add('–í—ã–ø–ª–∞—Ç—ã –∏ –±–æ–Ω—É—Å—ã').add('–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º').add('–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º').add('–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç')
                if ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactType'] == '–ü–∞—Ä—Ç–Ω–µ—Ä' or ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactOwnerTG'] in ['SPLIT-1', 'SPLIT-2']:
                    markup.add('–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º').add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–µ–Ω–µ–≥':
                operation = message.text
                admin_sum = ''
                admin_city = None
                mess = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ EUR'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                markup.add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and admin_sum is not None and operation == '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–µ–Ω–µ–≥' and admin_seller_nik is None and admin_city is None:
                admin_sum = message.text
                admin_seller_nik = ''
                mess = '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                markup.add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and admin_sum is not None and operation == '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–µ–Ω–µ–≥' and admin_seller_nik is not None and admin_city is None:
                admin_seller_nik = message.text
                admin_city = ''
                mess = '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥'
                buttons = ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                            '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–û—Ç–º–µ–Ω–∞']
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and admin_sum is not None and operation == '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–µ–Ω–µ–≥' and admin_seller_nik is not None and admin_city is not None:
                admin_city = message.text
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                ref_code = ACTIVE_CONTACT_LIST[admin_seller_nik]['Discount_Number'] if admin_seller_nik in ACTIVE_CONTACT_LIST else ''
                mess = '–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞'
                date = datetime.now(tz).strftime('%d.%m.%Y')
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'r', encoding='utf8') as f:
                    DealID_num = json.load(f)
                    DealID_num["ZZ"] += 0.0000001
                    DealID = "ZZ" + (str(format(DealID_num["ZZ"], '.7f'))).replace('.','')
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'w', encoding='utf8') as f:
                    json.dump(DealID_num, f, ensure_ascii=False, indent=2)
                usdt_eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                add_row(DealID, date, date, username, '', operation, '', 'EUR', admin_sum, '–ù–∞–ª–∏—á–Ω—ã–µ', '',
                        '', '/',
                        'EUR', '–ù–∞–ª–∏—á–Ω—ã–µ', '', admin_seller_nik, ref_code, admin_city, '', '', '', '', '', '',
                        '', '–ü–ª–∞–Ω', '', '', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –¥–µ–Ω–µ–≥', '', True, usdt_eur_rate, 1/usdt_eur_rate,)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                admin_sum, admin_cross_rate, admin_seller_nik, admin_city, admin_currency, comment, operation, bank_acc = None,  None, None, None, None, None, None, None
            elif ADMIN_FLAG and message.text == '–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
                operation = '–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
                mess = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ —á–µ—Ä–µ–∑ @\n'\
                                '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–∞–∂–º–∏–Ω–µ –∫–Ω–æ–ø–∫—É <em>–í—Å–µ</em>'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton('–í—Å–µ')
                b2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                markup.add(b1, b2)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and operation == '–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
                operation = ''
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup.add(*menu_buttons)
                if message.text != '–û—Ç–º–µ–Ω–∞':
                    mess_logs_list = get_logs_history(message.text)
                    for mess in mess_logs_list:
                        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                else: bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and (message.text in ["–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º", "–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º"] or (message.text in ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                        '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–í—Å–µ', '–î–∞–ª–µ–µ','–û —Å–µ–±–µ', '–û –∫—É—Ä–∞—Ç–æ—Ä–µ'] and operation in ["–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º", "–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º"])) and not admin_deals_city_flag:
                if message.text == '–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º':
                    operation = message.text
                    mess = '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ —Å–¥–µ–ª–æ–∫'
                    buttons = ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                            '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–í—Å–µ', '–î–∞–ª–µ–µ', '–û—Ç–º–µ–Ω–∞']
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(*buttons)
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                elif message.text == '–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º' and ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactType'] == '–ü–∞—Ä—Ç–Ω–µ—Ä':
                    operation = message.text
                    mess = '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç –æ —Å–µ–±–µ –∏–ª–∏ –æ –∫—É—Ä–∞—Ç–æ—Ä–µ'
                    buttons = ['–û —Å–µ–±–µ', '–û –∫—É—Ä–∞—Ç–æ—Ä–µ', '–û—Ç–º–µ–Ω–∞']
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(*buttons)
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                elif message.text in ['–û —Å–µ–±–µ', '–û –∫—É—Ä–∞—Ç–æ—Ä–µ'] or message.text == '–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º' and ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactType'] == '–ö—É—Ä–∞—Ç–æ—Ä':
                    if message.text == '–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º':
                        operation = message.text
                        admin_seller_nik = '@' + message.chat.username
                    if ACTIVE_CONTACT_LIST['@' + message.chat.username]['ContactType'] == '–ü–∞—Ä—Ç–Ω–µ—Ä':
                        admin_seller_nik = '@' + message.chat.username if message.text == '–û —Å–µ–±–µ' else '–í–≤–æ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞'
                    mess = '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ —Å–¥–µ–ª–æ–∫'
                    buttons = ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                            '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–í—Å–µ', '–î–∞–ª–µ–µ', '–û—Ç–º–µ–Ω–∞']
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(*buttons)
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                elif message.text == '–í—Å–µ' :
                    admin_deals_city_flag = True
                    admin_deals_city = ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                            '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–û—Ç–º–µ–Ω–∞', '–ú–æ—Å–∫–≤–∞', '']
                    if operation == '–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º':
                        mess = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ —á–µ—Ä–µ–∑ @\n'\
                                '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–∞–∂–º–∏–Ω–µ –∫–Ω–æ–ø–∫—É <em>–í—Å–µ</em>'
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        b1 = types.KeyboardButton('–í—Å–µ')
                        b2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                        markup.add(b1, b2)
                        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                    elif admin_seller_nik == '–í–≤–æ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞' and operation != '–û—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º':
                        mess = '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∫—É—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ @'
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        b2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                        markup.add(b2)
                        bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                    else:
                        admin_deals_city_flag = True 
                elif message.text == '–î–∞–ª–µ–µ':
                    if len(admin_deals_city) > 0 and operation != '–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º':
                        admin_deals_city_flag = True 
                        mess = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫ —á–µ—Ä–µ–∑ @\n'\
                                '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–∞–∂–º–∏–Ω–µ –∫–Ω–æ–ø–∫—É <em>–í—Å–µ</em>'
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        b1 = types.KeyboardButton('–í—Å–µ')
                        b2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                        markup.add(b1, b2)
                    elif len(admin_deals_city) > 0 and admin_seller_nik == '–í–≤–æ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞':
                        admin_deals_city_flag = True 
                        mess = '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∫—É—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ @'
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        b2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                        markup.add(b2)
                    else: 
                        admin_deals_city_flag = False
                        mess = '–í—ã–±–µ—Ä–µ—Ç–µ —Ö–æ—Ç—è –±—ã 1 –≥–æ—Ä–æ–¥'
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        buttons = ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                            '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–í—Å–µ', '–î–∞–ª–µ–µ', '–û—Ç–º–µ–Ω–∞']
                        markup.add(*buttons)
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                else:
                    admin_deals_city.append(message.text)
            elif ADMIN_FLAG and admin_deals_city_flag and message.text != '–û—Ç–º–µ–Ω–∞':
                res = False
                try:
                    if operation == '–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º' and admin_seller_nik != '–í–≤–æ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞':
                        res = create_deals_xlsx(message.text, admin_deals_city, admin_seller_nik)
                    elif operation == '–û—Ç—á–µ—Ç –ø–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º' and admin_seller_nik == '–í–≤–æ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞':
                        res = create_deals_xlsx('', admin_deals_city, message.text)
                    else:
                        res = create_deals_xlsx(message.text, admin_deals_city, admin_seller_nik)
                    mess = '–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!' if res else '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º'
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    username = '@' + message.chat.username if message.chat.username is not None else 'None'
                    menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                    markup.add(*menu_buttons)
                except Exception as e:
                    print('Exception: ' + str(e))
                    mess = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    b1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(b1)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                if res:
                    with open('Deals.xlsx', 'rb') as doc:
                        bot.send_document(message.chat.id, doc)
                admin_deals_city_flag = False
                admin_deals_city = []
                admin_seller_nik = None
                operation = None
            elif ADMIN_FLAG and (message.text in ['–û—Ç–∫—É–ø', '–°–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç']) and admin_currency is None and admin_sum is None and message.text != '–û—Ç–º–µ–Ω–∞':
                operation = message.text
                mess = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add('EUR').add('RSD').add('–û—Ç–º–µ–Ω–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and ((operation in ['–û—Ç–∫—É–ø', '–°–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç'] and admin_sum is None) or admin_currency is not None and admin_sum is None or message.text == '–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–æ–≤') and message.text != '–û—Ç–º–µ–Ω–∞':
                admin_sum = 0
                if admin_currency is None and message.text != '–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–æ–≤':
                    admin_currency = message.text
                    mess = f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {admin_currency}'
                else: 
                    if message.text != '–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–æ–≤':
                        admin_currency = message.text  
                    else:
                        admin_currency = 'EUR'
                        bonus_flag = True
                    mess = f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {admin_currency}'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add('–û—Ç–º–µ–Ω–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)

            elif ADMIN_FLAG and admin_sum is not None and admin_cross_rate is None and admin_seller_nik is None and admin_city is None and message.text != '–û—Ç–º–µ–Ω–∞':
                admin_sum = message.text.replace('.',',')
                if admin_currency is not None and operation in ['–û—Ç–∫—É–ø', '–°–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç']:
                    admin_cross_rate = 0
                    mess = '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–æ—Å—Å –∫—É—Ä—Å'
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add('–û—Ç–º–µ–Ω–∞')
                else:
                    username = '@' + message.chat.username if message.chat.username is not None else 'None'
                    ref_code = ACTIVE_CONTACT_LIST[username]['Discount_Number'] if username in ACTIVE_CONTACT_LIST else ''
                    mess = '–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞'
                    date = datetime.now(tz).strftime('%d.%m.%Y')
                    if bonus_flag:
                        deal_type = '–í—ã–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–æ–≤'
                        deal_status = '–ü–ª–∞–Ω'
                        comment = ''
                        balance = get_bonus_history(username, True, False)
                        if float(admin_sum) > float(str(balance).replace(',','.')):
                            balance_flag = False
                            mess = '–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É'
                        else: 
                            balance_flag = True
                    else:
                        balance_flag = True
                        deal_type = '–†–∞—Å—Ö–æ–¥—ã'
                        deal_status = '–ü–ª–∞–Ω'
                    if balance_flag:
                        with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'r', encoding='utf8') as f:
                            DealID_num = json.load(f)
                            DealID_num["ZZ"] += 0.0000001
                            DealID = "ZZ" + (str(format(DealID_num["ZZ"], '.7f'))).replace('.','')
                        with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'w', encoding='utf8') as f:
                            json.dump(DealID_num, f, ensure_ascii=False, indent=2)
                        usdt_eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                        add_row(DealID, date, date, username, '', deal_type, '', admin_currency, admin_sum, '–ù–∞–ª–∏—á–Ω—ã–µ', '',
                                '', '/',
                                '', '–ù–∞–ª–∏—á–Ω—ã–µ', '', username, ref_code, '', '', '', '', '', '', '',
                                '', deal_status, '', comment, '–†–∞—Å—Ö–æ–¥—ã', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                        add_border()
                        admin_sum, admin_cross_rate, admin_seller_nik, admin_city, admin_currency, comment, operation, bank_acc = None,  None, None, None, None, None, None, None
                        balance_flag = False
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        username = '@' + message.chat.username if message.chat.username is not None else 'None'
                        menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                        markup.add(*menu_buttons)
                    else:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        buttons = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
                        markup.add(buttons)
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                        markup.add(buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and admin_sum is not None and admin_cross_rate is not None and admin_seller_nik is None and admin_city is None and message.text != '–û—Ç–º–µ–Ω–∞' and operation == '–û—Ç–∫—É–ø':
                admin_cross_rate = message.text.replace('.',',')
                admin_seller_nik = ''
                mess = '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add('–û—Ç–º–µ–Ω–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and admin_sum is not None and admin_cross_rate is not None and (admin_seller_nik is not None or operation == '–°–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç') and admin_city is None and message.text != '–û—Ç–º–µ–Ω–∞':
                if operation == '–°–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç':
                    admin_cross_rate = message.text.replace('.',',')
                    admin_seller_nik = '@' + message.chat.username if message.chat.username is not None else 'None'
                else:
                    admin_seller_nik = message.text
                    bank_acc = ''
                admin_city = ''
                mess = '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add('–û—Ç–º–µ–Ω–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and admin_sum is not None and admin_cross_rate is not None and admin_seller_nik is not None and admin_city is not None and bank_acc is not None and message.text != '–û—Ç–º–µ–Ω–∞':
                if operation == '–û—Ç–∫—É–ø':
                    admin_city = message.text
                    bank_acc = '–ù–∞–ª–∏—á–Ω—ã–µ'
                else:
                    bank_acc = message.text
                mess = '–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞'
                date = datetime.now(tz).strftime('%d.%m.%Y')
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                curator = ACTIVE_CONTACT_LIST[username]['ContactDealer'] if username in ACTIVE_CONTACT_LIST else ''
                ref_code = ACTIVE_CONTACT_LIST[username]['Discount_Number'] if username in ACTIVE_CONTACT_LIST else ''
                seller_ref_code = ACTIVE_CONTACT_LIST[admin_seller_nik]['Discount_Number'] if admin_seller_nik in ACTIVE_CONTACT_LIST else ''
                date = datetime.now(tz).strftime('%d.%m.%Y')
                usdt_info = rates_funcs.compute_usdt_rsd_amount(1, username) if admin_currency == 'RSD' else rates_funcs.compute_usdt_euro_amount(1, username)
                data['USDT_EURO_RATE_GS'] = usdt_info['usdt_eur_rate_gs']
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'r', encoding='utf8') as f:
                    DealID_num = json.load(f)
                    DealID_num["ZZ"] += 0.0000001
                    DealID = "ZZ" + (str(format(DealID_num["ZZ"], '.7f'))).replace('.','')
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'w', encoding='utf8') as f:
                    json.dump(DealID_num, f, ensure_ascii=False, indent=2)
                add_row(DealID, date, date, username, '', operation, f'USDT=>{admin_currency}', 'USDT', admin_sum, 'Binance', '',
                        admin_cross_rate, '/',
                        admin_currency, bank_acc, '', admin_seller_nik, seller_ref_code, admin_city, '', '', '', '', '', '',
                        '', '–ü–ª–∞–Ω', '', '', 'admin', '', True, data['USDT_EURO_RATE_GS'], 1/data['USDT_EURO_RATE_GS'])
                add_row(DealID, date, date, username, '', operation, f'USDT=>{admin_currency}', admin_currency, '', bank_acc, '',
                        data['USDT_EURO_RATE_GS'], admin_sum,
                        admin_currency, '–ù–∞–ª–∏—á–Ω—ã–µ', '', username, ref_code, admin_city, '', '', '', '', '', '',
                        '', '–ü–ª–∞–Ω', '', '', 'admin', '', '', '', '')
                add_row(DealID, date, date, username, '', operation, f'USDT=>{admin_currency}', admin_currency, '', '–ù–∞–ª–∏—á–Ω—ã–µ', '',
                        data['USDT_EURO_RATE_GS']*0.993, admin_sum,
                        admin_currency, bank_acc, '', username, ref_code, admin_city, 'NEW', '', '', '', '', '',
                        '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', 'admin2', '', '', '', '')
                eur_rate = 1 if admin_currency == 'EUR' else rates_funcs.get_fiat_rates_tradingview()['RSD_EUR']
                calculate_indexes(operation, False, eur_rate)
                add_border()
                admin_sum, admin_cross_rate, admin_seller_nik, admin_city, admin_currency, comment, operation, bank_acc = None,  None, None, None, None, None, None, None
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and admin_sum is not None and admin_cross_rate is not None and admin_seller_nik is not None and admin_city is not None and bank_acc is None and message.text != '–û—Ç–º–µ–Ω–∞':
                admin_city = message.text
                bank_acc = ''
                mess = '–í–≤–µ–¥–∏—Ç–µ 4 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add('–û—Ç–º–µ–Ω–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–†–∞—Å—Ö–æ–¥—ã':
                comment = ''
                mess = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç—Ä–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥–∞–º'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add('–û—Ç–º–µ–Ω–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and comment is not None and admin_sum is None and admin_cross_rate is None and admin_seller_nik is None and admin_city is None and message.text != '–û—Ç–º–µ–Ω–∞':
                admin_currency = ''
                comment = message.text
                mess = '–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3).add('RUB').add('USDT').add('EUR').add('–û—Ç–º–µ–Ω–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–ë–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç':
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                mess = check_balance(username)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç':
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                mess = cards_balance(username)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–í—ã–ø–ª–∞—Ç—ã –∏ –±–æ–Ω—É—Å—ã':
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–û–±–º–µ–Ω–Ω–∏–∫']:
                    mess = get_bonus_history(username, False, False)
                    username = '@' + message.chat.username if message.chat.username is not None else 'None'
                    menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                    markup.add(*menu_buttons)
                elif ACTIVE_CONTACT_LIST[username]['ContactType'] == '–ü–∞—Ä—Ç–Ω–µ—Ä':
                    mess = '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, –æ –∫—É—Ä–∞—Ç–æ—Ä–µ –∏–ª–∏ –æ–±–º–µ–Ω–Ω–∏–∫–µ?'
                    markup.add('–û —Å–µ–±–µ').add('–û –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text in ['–û —Å–µ–±–µ', '–û –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ']:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                if message.text == '–û —Å–µ–±–µ':
                    mess = '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–µ–±–µ, –∫–∞–∫ –æ –∫—É—Ä–∞—Ç–æ—Ä–µ –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–µ?'
                    markup.add('–ö–∞–∫ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ').add('–ö–∞–∫ –æ –∫—É—Ä–∞—Ç–æ—Ä–µ')
                else:
                    KURATOR_BONUS_FLAG = True
                    mess = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ @'
                    markup = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text in ['–ö–∞–∫ –æ –∫—É—Ä–∞—Ç–æ—Ä–µ', '–ö–∞–∫ –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ']:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                mess = get_bonus_history(username, False, False) if message.text == '–ö–∞–∫ –æ –∫—É—Ä–∞—Ç–æ—Ä–µ' else get_bonus_history(username, False, True)
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and KURATOR_BONUS_FLAG:
                KURATOR_BONUS_FLAG = False
                username = message.text
                mess = get_bonus_history(username, False, False)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å':
                ADMIN_FLAG = False
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                mess = '<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞</b>'
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif ADMIN_FLAG and message.text == '–û—Ç–º–µ–Ω–∞':
                mess = '–û—Ç–º–µ–Ω–µ–Ω–æ'
                admin_sum, admin_cross_rate, admin_seller_nik, admin_city, admin_currency, comment, operation, bank_acc = None,  None, None, None, None, None, None, None
                bonus_flag = False
                admin_deals_city_flag = False
                admin_deals_city = []
                KURATOR_BONUS_FLAG = False
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                menu_buttons = form_menu_buttons(ADMIN_MENU_BUTTONS) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else form_menu_buttons(ADMIN_MENU_BUTTONS_EX)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            ### –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if message.chat.id == -610534834 and not MESSAGE_FLAG and message.text != '–í–∏–¥–µ–æ':
                MESSAGE_FLAG = True
                USER_OWNER = False
                SEX_FLAG = False
                USER_STATUS_FLAG = False
                CITY_FLAG = False
                global message_text
                message_text = message.text
                global spam_message_id
                spam_message_id = message.message_id
                mess1 = '–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤'
                buttons = ['@MonexCapital_MNE', '@vadimosx', 'NEW', '–í—Å–µ']
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*buttons)
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
            elif message.chat.id == -610534834 and MESSAGE_FLAG and not USER_OWNER and not SEX_FLAG and not USER_STATUS_FLAG and not CITY_FLAG and message.text != '–û—Ç–º–µ–Ω–∏—Ç—å':
                USER_OWNER = True
                global message_user_owner
                if message.text == '–í—Å–µ':
                    message_user_owner = ['@MonexCapital_MNE', '@vadimosx', 'NEW', '–í—Å–µ']
                else:
                    message_user_owner.append(message.text)
                mess1 = '–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'
                buttons = ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                           '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–í—Å–µ', '–î–∞–ª–µ–µ']
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*buttons)
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
            elif message.chat.id == -610534834 and MESSAGE_FLAG and USER_OWNER and not SEX_FLAG and not USER_STATUS_FLAG and not CITY_FLAG and message.text != '–û—Ç–º–µ–Ω–∏—Ç—å':
                global message_city
                if message.text == '–î–∞–ª–µ–µ':
                    CITY_FLAG = True
                    mess1 = '–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'
                    b1 = types.KeyboardButton('–ú—É–∂—á–∏–Ω—ã')
                    b2 = types.KeyboardButton('–ñ–µ–Ω—â–∏–Ω—ã')
                    b3 = types.KeyboardButton('–í—Å–µ')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(b1, b2, b3)
                    bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
                elif message.text == '–í—Å–µ':
                    message_city = ['–ë–∞—Ä', '–ë–µ—á–∏—á–∏', '–ë—É–¥–≤–∞', '–ö–æ—Ç–æ—Ä', '–ü–µ—Ç—Ä–æ–≤–∞—Ü', '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞', '–¢–∏–≤–∞—Ç',
                                    '–£–ª—å—Ü–∏–Ω—å', '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏', '–¶–µ—Ç–∏–Ω–µ', '–í—Å–µ', '–î–∞–ª–µ–µ', 'Monex_TG_Bot']
                    CITY_FLAG = True
                    mess1 = '–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'
                    b1 = types.KeyboardButton('–ú—É–∂—á–∏–Ω—ã')
                    b2 = types.KeyboardButton('–ñ–µ–Ω—â–∏–Ω—ã')
                    b3 = types.KeyboardButton('–í—Å–µ')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(b1, b2, b3)
                    bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
                else:
                    message_city.append(message.text)
            elif message.chat.id == -610534834 and message.text in ['–ú—É–∂—á–∏–Ω—ã', '–ñ–µ–Ω—â–∏–Ω—ã',
                                                                     '–í—Å–µ'] and USER_OWNER and MESSAGE_FLAG and not SEX_FLAG and not USER_STATUS_FLAG and CITY_FLAG and message.text != '–û—Ç–º–µ–Ω–∏—Ç—å':
                SEX_FLAG = True
                global message_sex
                if message.text == '–ú—É–∂—á–∏–Ω—ã':
                    message_sex.append('M')
                elif message.text == '–ñ–µ–Ω—â–∏–Ω—ã':
                    message_sex.append('W')
                else:
                    message_sex.append('M')
                    message_sex.append('W')
                    message_sex.append('')
                    message_sex.append('-')
                mess1 = '–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'
                b1 = types.KeyboardButton('–î–æ 30 –¥–Ω–µ–π')
                b2 = types.KeyboardButton('–û—Ç 30 –¥–æ 60 –¥–Ω–µ–π')
                b3 = types.KeyboardButton('–ë–æ–ª–µ–µ 60 –¥–Ω–µ–π')
                b4 = types.KeyboardButton('–í—Å–µ')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4)
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
            elif message.chat.id == -610534834 and message.text in ['–î–æ 30 –¥–Ω–µ–π', '–û—Ç 30 –¥–æ 60 –¥–Ω–µ–π', '–ë–æ–ª–µ–µ 60 –¥–Ω–µ–π',
                                                                     '–í—Å–µ'] and USER_OWNER and MESSAGE_FLAG and SEX_FLAG and not USER_STATUS_FLAG and CITY_FLAG and message.text != '–û—Ç–º–µ–Ω–∏—Ç—å':
                USER_STATUS_FLAG = True
                global message_last_trans
                if message.text == '–î–æ 30 –¥–Ω–µ–π':
                    message_last_trans = [0, 30]
                elif message.text == '–û—Ç 30 –¥–æ 60 –¥–Ω–µ–π':
                    message_last_trans = [30, 60]
                elif message.text == '–ë–æ–ª–µ–µ 60 –¥–Ω–µ–π':
                    message_last_trans = [60, 1000000]
                else:
                    message_last_trans = [-10, 1000000]
                mess1 = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'
                b1 = types.KeyboardButton('–ë–∞–∑–æ–≤—ã–π')
                b2 = types.KeyboardButton('–ë—Ä–æ–Ω–∑–æ–≤—ã–π')
                b3 = types.KeyboardButton('–°–µ—Ä–µ–±—Ä—è–Ω—ã–π')
                b4 = types.KeyboardButton('–ó–æ–ª–æ—Ç–æ–π')
                b5 = types.KeyboardButton('–í—Å–µ')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4, b5)
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
            elif message.chat.id == -610534834 and message.text in ['–ë–∞–∑–æ–≤—ã–π', '–ë—Ä–æ–Ω–∑–æ–≤—ã–π', '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π', '–ó–æ–ª–æ—Ç–æ–π',
                                                                     '–í—Å–µ'] and USER_OWNER and MESSAGE_FLAG and SEX_FLAG and USER_STATUS_FLAG and CITY_FLAG and message.text != '–û—Ç–º–µ–Ω–∏—Ç—å':
                global message_user_status
                if message.text == '–í—Å–µ':
                    message_user_status = ['–ë–∞–∑–æ–≤—ã–π', '–ë—Ä–æ–Ω–∑–æ–≤—ã–π', '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π', '–ó–æ–ª–æ—Ç–æ–π']
                else:
                    message_user_status = [message.text]
                mess1 = f'–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º: <em>"{message_text}"</em>? \n' \
                        f'–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–æ–≤: {", ".join(str(sex) for sex in message_sex)} \n' \
                        f'–ì–æ—Ä–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {", ".join(str(city) for city in message_city)} \n' \
                        f'–î–Ω–µ–π —Å –ø–æ–ª–µ–¥–Ω–µ–≥–æ –æ–±–º–µ–Ω–∞: {" –û—Ç/–î–æ ".join(str(trans) for trans in message_last_trans)} \n' \
                        f'–ö–∞—Ç–µ–≥–∏—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {", ".join(str(status) for status in message_user_status)}'
                b1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
                b2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(b1, b2)
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
            elif message.chat.id == -610534834 and (
                    message.text == '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' and USER_OWNER and MESSAGE_FLAG and SEX_FLAG and USER_STATUS_FLAG and CITY_FLAG or message.text == '–í–∏–¥–µ–æ') and message.text != '–û—Ç–º–µ–Ω–∏—Ç—å':
                user_id_list = []
                if message.text != '–í–∏–¥–µ–æ':
                    mess1 = message_text
                    mess2 = f'–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: <em>"{mess1}"</em> –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è <em>{len(user_id_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</em> '
                    for id in scrab_contact_list().values():
                        if 'DateLast' in id.keys():
                            if id['DateLast'] == '':
                                id['DateLast'] = -1
                            if id['Sex'] in message_sex and id['City'] in message_city and id[
                                'ContactOwnerTG'] in message_user_owner and id[
                                'DiscClientCategory'] in message_user_status and int(id['DateLast']) > \
                                    message_last_trans[0] and int(id['DateLast']) < message_last_trans[1]:
                                user_id_list.append(id['user_ID'])
                        else:
                            pass
                else:
                    mess2 = f'–†–∞—Å—Å—ã–ª–∫–∞ –í–ò–î–ï–û –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è <em>{len(user_id_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</em> '
                    user_id_list = [id['user_ID'] for id in scrab_contact_list().values()]
                MESSAGE_FLAG = False
                SEX_FLAG = False
                USER_STATUS_FLAG = False
                CITY_FLAG = False
                USER_OWNER = False
                message_city = []
                message_sex = []
                message_user_status = []
                message_user_owner = []
                mess3 = '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å'
                for user_id in user_id_list:
                    if user_id != '':
                        try:
                            if message.text != '–í–∏–¥–µ–æ':
                                bot.forward_message(user_id, -610534834, spam_message_id)
                            else:
                                bot.send_video(chat_id=user_id,
                                               video=open('C:/Users/admin/Documents/AlphaCapitalHowToBot1.mp4', 'rb'),
                                               supports_streaming=True, width=1080, height=1920)
                        except Exception as e:
                            pass
                bot.send_message(message.chat.id, mess2, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(message.chat.id, mess3, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
            elif message.chat.id == -610534834 and MESSAGE_FLAG and message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
                    MESSAGE_FLAG = False
                    SEX_FLAG = False
                    USER_STATUS_FLAG = False
                    CITY_FLAG = False
                    USER_OWNER = False
                    message_city = []
                    message_sex = []
                    message_user_status = []
                    message_user_owner = []
                    mess1 = '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å'
                    bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
            # –°—Ü–µ–Ω–∞—Ä–∏–π –ë–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
            if data.get('REFERRAL_FLAG') and message.text == _('–ö–∞—Ä—Ç–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã'):
                data['DISCONT_PERIOD_FLAG'] = False
                data['REFERRAL_PERIOD_FLAG'] = False
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
                user_info = ACTIVE_CONTACT_LIST[username]
                Discount_Number = user_info['Discount_Number']  # –ù–æ–º–µ—Ä –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
                DiscTurnoverUSDT = user_info['DiscTurnoverUSDT']  # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∏—Ç–æ–≥ –æ–±–º–µ–Ω–∞ USDT
                DiscTurnover3MUSDT = user_info['DiscTurnover3MUSDT']  # –û–±–º–µ–Ω 3 –º–µ—Å USDT
                DiscTurnoverRUB = user_info['DiscTurnoverRUB']  # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∏—Ç–æ–≥ –æ–±–º–µ–Ω–∞ RUB
                DiscTurnover3MRUB = user_info['DiscTurnover3MRUB']  # –û–±–º–µ–Ω 3 –º–µ—Å RUB
                Discount = str(float(user_info['Discount'].replace(',', '.'))*100)+'%'  # –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
                DiscClientCategory = user_info['DiscClientCategory']  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                DiscClientCategoryUSDT = user_info['DiscClientCategoryUSDT']  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞ USDT
                DiscClientCategoryRUB = user_info['DiscClientCategoryRUB']  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞ RUB
                Referral_Number = user_info['Referral_Number']  # –ù–æ–º–µ—Ä –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
                ReferalTurnoverUSDT = user_info['ReferalTurnoverUSDT']
                ReferalTurnover3MUSDT = user_info['ReferalTurnover3MUSDT']
                ReferalTurnoverRUB = user_info['ReferalTurnoverRUB']
                ReferalTurnover3MRUB = user_info['ReferalTurnover3MRUB']
                mess = _('<b>–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b> \n\n' \
                        '<b>–ù–æ–º–µ—Ä –ø–æ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:</b> {Discount_Number}\n' \
                        '<em>–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∏—Ç–æ–≥ –æ–±–º–µ–Ω–∞ USDT:</em> {DiscTurnoverUSDT}\n' \
                        '<em>–û–±–º–µ–Ω 3 –º–µ—Å USDT:</em> {DiscTurnover3MUSDT}\n' \
                        '<em>–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∏—Ç–æ–≥ –æ–±–º–µ–Ω–∞ RUB:</em> {DiscTurnoverRUB}\n' \
                        '<em>–û–±–º–µ–Ω 3 –º–µ—Å RUB:</em> {DiscTurnover3MRUB}\n' \
                        '<em>–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏:</em> {Discount}\n' \
                        '<em>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞:</em> {DiscClientCategory}\n' \
                        '<b>–ù–æ–º–µ—Ä –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ :</b> {Referral_Number}\n' \
                        '<em>–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∏—Ç–æ–≥ –æ–±–º–µ–Ω–∞ USDT:</em> {ReferalTurnoverUSDT}\n' \
                        '<em>–û–±–º–µ–Ω 3 –º–µ—Å USDT:</em> {ReferalTurnover3MUSDT}\n' \
                        '<em>–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∏—Ç–æ–≥ –æ–±–º–µ–Ω–∞ RUB:</em> {ReferalTurnoverRUB}\n' \
                        '<em>–û–±–º–µ–Ω 3 –º–µ—Å RUB:</em> {ReferalTurnover3MRUB}\n').format(Discount_Number=Discount_Number,
                                                                                    DiscTurnoverUSDT=DiscTurnoverUSDT,
                                                                                    DiscTurnover3MUSDT=DiscTurnover3MUSDT,
                                                                                    DiscTurnoverRUB=DiscTurnoverRUB,
                                                                                    DiscTurnover3MRUB=DiscTurnover3MRUB,
                                                                                    Discount=Discount,
                                                                                    DiscClientCategory=DiscClientCategory,
                                                                                    Referral_Number=Referral_Number,
                                                                                    ReferalTurnoverUSDT=ReferalTurnoverUSDT,
                                                                                    ReferalTurnover3MUSDT=ReferalTurnover3MUSDT,
                                                                                    ReferalTurnoverRUB=ReferalTurnoverRUB,
                                                                                    ReferalTurnover3MRUB=ReferalTurnover3MRUB)
                mess1 = check_status(username, _)
                b1 = types.KeyboardButton(_('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))
                b2 = types.KeyboardButton(_('–î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))
                b3 = types.KeyboardButton(_('–ö–∞—Ä—Ç–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã'))
                b4 = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b3, b2, b1, b4)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
            elif data.get('REFERRAL_FLAG') and message.text == _('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'):
                data['REFERRAL_OPTIONS_FLAG'] = True
                mess = _('–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤, –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ –≤—ã–ø–ª–∞—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É.\n'
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ')
                b1 = types.KeyboardButton(_('–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫'))
                b2 = types.KeyboardButton(_('–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ –≤—ã–ø–ª–∞—Ç'))
                b3 = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(b1, b2, b3)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
            elif data.get('REFERRAL_FLAG') and data.get('REFERRAL_OPTIONS_FLAG') and message.text in [_('–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫'), _('–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ –≤—ã–ø–ª–∞—Ç')]:
                if message.text == _('–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∏ –≤—ã–ø–ª–∞—Ç'):
                    data['REFERRAL_CHARGES_FLAG'] = True
                    data['REFERRAL_HIST_FLAG'] = False
                else:
                    data['REFERRAL_HIST_FLAG'] = True
                    data['REFERRAL_CHARGES_FLAG'] = False
                mess = _('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç.')
                b1 = types.KeyboardButton(_('–ó–∞ –º–µ—Å—è—Ü'))
                b2 = types.KeyboardButton(_('–ó–∞ 3 –º–µ—Å—è—Ü–∞'))
                b3 = types.KeyboardButton(_('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'))
                b4 = types.KeyboardButton(_('–ù–∞–∑–∞–¥'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif data.get('REFERRAL_FLAG') and data.get('REFERRAL_OPTIONS_FLAG') and (data.get('REFERRAL_CHARGES_FLAG') or data.get('REFERRAL_HIST_FLAG')) and message.text in [_('–ó–∞ –º–µ—Å—è—Ü'), _('–ó–∞ 3 –º–µ—Å—è—Ü–∞'), _('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è')]:
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                user_info = ACTIVE_CONTACT_LIST[username]
                Referral_Number = user_info['Referral_Number']
                if data.get('REFERRAL_CHARGES_FLAG'):
                    if message.text == _('–ó–∞ –º–µ—Å—è—Ü'):
                        period = _('–∑–∞ –º–µ—Å—è—Ü')
                        ReferalTurnoverUSDT = float(
                            re.sub(r'[^0-9,]', '', user_info['ReferalTurnover30DUSDT']).replace(',', '.'))
                        ReferalTurnoverRUB = float(re.sub(r'[^0-9,]', '', user_info['ReferalTurnover30DRUB']).replace(',', '.'))
                        TurnoverQty = user_info['Turnover30DQty']
                        ReferalBenefitEUR = float(re.sub(r'[^0-9,]', '', user_info['ReferalBenefit30DEUR']).replace(',', '.'))
                        ReferalPayoutEUR = -float(re.sub(r'[^0-9,]', '', user_info['ReferalPayout30DEUR']).replace(',', '.'))
                        OstStart = (float(re.sub(r'[^0-9,]', '', user_info['ReferalBenefitEUR']).replace(',', '.')) - float(
                            re.sub(r'[^0-9,]', '', user_info['ReferalBenefit30DEUR']).replace(',', '.'))) - (float(
                            re.sub(r'[^0-9,]', '', user_info['ReferalPayoutEUR']).replace(',', '.')) - float(
                            re.sub(r'[^0-9,]', '', user_info['ReferalPayout30DEUR']).replace(',', '.')))
                        OstEnd = round(OstStart + float(ReferalBenefitEUR) + float(ReferalPayoutEUR), 2)
                    elif message.text == _('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'):
                        period = _('–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è')
                        ReferalTurnoverUSDT = float(
                            re.sub(r'[^0-9,]', '', user_info['ReferalTurnoverUSDT']).replace(',', '.'))
                        ReferalTurnoverRUB = float(re.sub(r'[^0-9,]', '', user_info['ReferalTurnoverRUB']).replace(',', '.'))
                        TurnoverQty = user_info['TurnoverQty']
                        ReferalBenefitEUR = float(re.sub(r'[^0-9,]', '', user_info['ReferalBenefitEUR']).replace(',', '.'))
                        ReferalPayoutEUR = -float(re.sub(r'[^0-9,]', '', user_info['ReferalPayoutEUR']).replace(',', '.'))
                        OstStart = 0
                        OstEnd = round(OstStart + float(ReferalBenefitEUR) + float(ReferalPayoutEUR), 2)
                    else:
                        period = _('–∑–∞ 3 –º–µ—Å—è—Ü–∞')
                        float(re.sub(r'[^0-9,]', '', user_info['ReferalPayout3MEUR']).replace(',','.'))
                        ReferalTurnoverUSDT = float(re.sub(r'[^0-9,]', '', user_info['ReferalTurnover3MUSDT']).replace(',','.'))
                        ReferalTurnoverRUB = float(re.sub(r'[^0-9,]', '', user_info['ReferalTurnover3MRUB']).replace(',','.'))
                        TurnoverQty = user_info['Turnover3MQty']
                        ReferalBenefitEUR = float(re.sub(r'[^0-9,]', '', user_info['ReferalBenefit3MEUR']).replace(',','.'))
                        ReferalPayoutEUR = -float(re.sub(r'[^0-9,]', '', user_info['ReferalPayout3MEUR']).replace(',','.'))
                        OstStart = (float(re.sub(r'[^0-9,]', '', user_info['ReferalBenefitEUR']).replace(',','.'))-float(re.sub(r'[^0-9,]', '', user_info['ReferalBenefit3MEUR']).replace(',','.')))-(float(re.sub(r'[^0-9,]', '', user_info['ReferalPayoutEUR']).replace(',','.'))-float(re.sub(r'[^0-9,]', '', user_info['ReferalPayout3MEUR']).replace(',','.')))
                        OstEnd = round(OstStart + float(ReferalBenefitEUR) + float(ReferalPayoutEUR), 2)
                    mess = _('<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É –∑–∞ {period}:</b> \n\n' \
                            '<b>–ù–æ–º–µ—Ä –ø–æ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:</b> {Referral_Number}\n' \
                            '<em>–ò—Ç–æ–≥–æ —Å—É–º–º–∞ –æ–±–º–µ–Ω–æ–≤ –≤ USDT:</em> {ReferalTurnoverUSDT} \n' \
                            '<em>–ò—Ç–æ–≥–æ —Å—É–º–º–∞ –æ–±–º–µ–Ω–æ–≤ –≤ RUB:</em> {ReferalTurnoverRUB}\n\n' \
                            '<em>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:</em> {TurnoverQty}\n'
                            '<b>–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –≤ EUR:</b> \n' \
                            '<em>–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –Ω–∞—á–∞–ª–æ:</em> {OstStart}\n' \
                            '<em>–ù–∞—á–∏—Å–ª–µ–Ω–Ω–æ –∑–∞ –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ:</em> {ReferalBenefitEUR}\n' \
                            '<em>–í—ã–ø–ª–∞—á–µ–Ω–æ –∑–∞ –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</em> {ReferalPayoutEUR}\n' \
                            '<em>–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–æ–Ω–µ—Ü:</em> {OstEnd}').format(period=period,
                                                                        Referral_Number=Referral_Number,
                                                                        ReferalTurnoverUSDT=ReferalTurnoverUSDT,
                                                                        ReferalTurnoverRUB=ReferalTurnoverRUB,
                                                                        TurnoverQty=TurnoverQty,
                                                                        OstStart=OstStart,
                                                                        ReferalBenefitEUR=ReferalBenefitEUR,
                                                                        ReferalPayoutEUR=ReferalPayoutEUR,
                                                                        OstEnd=OstEnd)
                elif data.get('REFERRAL_HIST_FLAG'):
                    ref_code = ACTIVE_CONTACT_LIST[username]['Referral_Number']
                    disc_code = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                    mess_ref, mess_ref_month, mess_ref_3month = get_trans_history_ref(username, ref_code, _)
                    if message.text == _('–ó–∞ –º–µ—Å—è—Ü'):
                        if _('–î–∞—Ç–∞') in mess_ref_month:
                            mess = mess_ref_month
                        else:
                            mess = _('–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')
                    elif message.text == _('–ó–∞ 3 –º–µ—Å—è—Ü–∞'):
                        if _('–î–∞—Ç–∞') in mess_ref_3month:
                            mess = mess_ref_3month
                        else:
                            mess = _('–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞')
                    else:
                        if _('–î–∞—Ç–∞') in mess_ref:
                            mess = mess_ref
                        else:
                            mess = _('–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫')
                b1 = types.KeyboardButton(_('–ó–∞ –º–µ—Å—è—Ü'))
                b2 = types.KeyboardButton(_('–ó–∞ 3 –º–µ—Å—è—Ü–∞'))
                b3 = types.KeyboardButton(_('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'))
                b4 = types.KeyboardButton(_('–ù–∞–∑–∞–¥'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # –ò—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
            elif data.get('REFERRAL_FLAG') and message.text == _('–î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'):
                data['DISCONT_PERIOD_FLAG'] = True
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                mess = _('–ò—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤ –ø–æ –í–∞—à–µ–º—É –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–º—É –∫–æ–¥—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü, 3 –º–µ—Å—è—Ü–∞, –≤—Å–µ –≤—Ä–µ–º—è.\n' \
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: ')
                b1 = types.KeyboardButton(_('–ó–∞ –º–µ—Å—è—Ü'))
                b2 = types.KeyboardButton(_('–ó–∞ 3 –º–µ—Å—è—Ü–∞'))
                b3 = types.KeyboardButton(_('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'))
                b4 = types.KeyboardButton(_('–ù–∞–∑–∞–¥'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
            elif data.get('REFERRAL_FLAG') and data.get('DISCONT_PERIOD_FLAG') and message.text == _('–ó–∞ –º–µ—Å—è—Ü'):
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                ref_code = ACTIVE_CONTACT_LIST[username]['Referral_Number']
                disc_code = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                mess_disc, mess_disc_month, mess_disc_3month = get_trans_history_disc(username, disc_code, _)
                b1 = types.KeyboardButton(_('–ó–∞ –º–µ—Å—è—Ü'))
                b2 = types.KeyboardButton(_('–ó–∞ 3 –º–µ—Å—è—Ü–∞'))
                b3 = types.KeyboardButton(_('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'))
                b4 = types.KeyboardButton(_('–ù–∞–∑–∞–¥'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4)
                if _('–î–∞—Ç–∞') in mess_disc_month:
                    mess = mess_disc_month
                else:
                    mess = _('–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif data.get('REFERRAL_FLAG') and data.get('DISCONT_PERIOD_FLAG') and message.text == _('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'):
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                ref_code = ACTIVE_CONTACT_LIST[username]['Referral_Number']
                disc_code = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                mess_disc, mess_disc_month, mess_disc_3month = get_trans_history_disc(username, disc_code, _)
                b1 = types.KeyboardButton(_('–ó–∞ –º–µ—Å—è—Ü'))
                b2 = types.KeyboardButton(_('–ó–∞ 3 –º–µ—Å—è—Ü–∞'))
                b3 = types.KeyboardButton(_('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'))
                b4 = types.KeyboardButton(_('–ù–∞–∑–∞–¥'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4)
                if _('–î–∞—Ç–∞') in mess_disc:
                    mess = mess_disc
                else:
                    mess = _('–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif data.get('REFERRAL_FLAG') and data.get('DISCONT_PERIOD_FLAG') and message.text == _('–ó–∞ 3 –º–µ—Å—è—Ü–∞'):
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                ref_code = ACTIVE_CONTACT_LIST[username]['Referral_Number']
                disc_code = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                mess_disc, mess_disc_month, mess_disc_3month = get_trans_history_disc(username, disc_code, _)
                b1 = types.KeyboardButton(_('–ó–∞ –º–µ—Å—è—Ü'))
                b2 = types.KeyboardButton(_('–ó–∞ 3 –º–µ—Å—è—Ü–∞'))
                b3 = types.KeyboardButton(_('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'))
                b4 = types.KeyboardButton(_('–ù–∞–∑–∞–¥'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4)
                if _('–î–∞—Ç–∞') in mess_disc_3month:
                    mess = mess_disc_3month
                else:
                    mess = _('–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif data.get('REFERRAL_FLAG') and message.text == _('–ù–∞–∑–∞–¥'):
                data['DISCONT_PERIOD_FLAG'] = False
                data['REFERRAL_PERIOD_FLAG'] = False
                data['REFERRAL_CHARGES_FLAG'] = False
                data['REFERRAL_HIST_FLAG'] = False
                data['REFERRAL_OPTIONS_FLAG'] = False
                b1 = types.KeyboardButton(_('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))
                b2 = types.KeyboardButton(_('–î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))
                b3 = types.KeyboardButton(_('–ö–∞—Ä—Ç–∞ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã'))
                b4 = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b3, b2, b1, b4)
                bot.send_message(message.chat.id, text=_('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é'), parse_mode='html',
                                reply_markup=markup)
            elif (data.get('REFERRAL_FLAG') or data.get('FEEDBACK_FLAG') or data.get('FORM_ORDER_FLAG')) and message.text == _('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
                data['REFERRAL_FLAG'] = False
                data['FEEDBACK_FLAG'] = False
                data['FORM_ORDER_FLAG'] = False
                a = types.ReplyKeyboardRemove()
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, text=_('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é'), parse_mode='html',
                                reply_markup=markup)
            if LANGUAGE_FLAG and message.text in [_('RU'), _('EN'), _('SR')]:
                username = '@' + message.chat.username if message.chat.username is not None else message.chat.id
                write_language(message.from_user.id, message.text)
                get_user_translator.clean(message.from_user.id)
                _ = get_user_translator(message.from_user.id)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                mess = _('–Ø–∑—ã–∫ —Å–º–µ–Ω–µ–Ω')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∫–ª–∏–µ–Ω—Ç–∞
            if FEEDBACK_FLAG and message.text != _('üì® –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤') and message.text != '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                if message.text in _(MAIN_MENU_BUTTONS) or message.text in ['/form_order', '/contact_operator', '/get_rates',
                                                                            '/documents', '/refferal', '/feedback',
                                                                            '/change_language', '/help']:
                    FEEDBACK_FLAG = False
                else:
                    tel_id = message.from_user.id
                    if message.chat.username is not None:
                        tel_nick = '@' + message.chat.username
                    else:
                        tel_nick = 'no_username'
                    tel_name = message.from_user.first_name
                    date = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')
                    # date = datetime.utcfromtimestamp(message.json['date']).strftime('%Y-%m-%d %H:%M:%S')
                    client_feedback = message.text
                    # TODO: –ù–µ –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å??
                    operator_mess = f'<em>–ò—Å—Ç–æ—á–Ω–∏–∫:</em> Alpha_TG_Bot\n' \
                                    f'<b>–û—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤:</b>\n' \
                                    f'<em>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</em> {tel_name}\n' \
                                    f'<em>ID –∫–ª–∏–µ–Ω—Ç–∞:</em> {tel_id}\n' \
                                    f'<em>–ù–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:</em> {tel_nick}\n' \
                                    f'<em>–û—Ç–∑—ã–≤:</em> {client_feedback}\n' \
                                    f'<em>–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:</em> {date}'
                    a = types.ReplyKeyboardRemove()
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                    markup.add(*menu_buttons)
                    mess = _('–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤!')
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                    # bot.send_message(GROUP_CHAT_ID, operator_mess, parse_mode='html', reply_markup=a)
                    write_feedback(date, tel_id, tel_nick, tel_name, client_feedback)
                    FEEDBACK_FLAG = False
            ###2.1.1 –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: –û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û
            if (message.text == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') or message.text == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò') or message.text == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï')) and (data.get('FORM_ORDER_FLAG')):
                data['OPER_FLAG_EUR_RUB'] = True
                data['OPER_FLAG_USDT_EURO'] = False
                data['OPER_NAME_RE'] = str(message.text)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–°–±–µ—Ä–±–∞–Ω–∫'))
                b2 = types.KeyboardButton(_('–¢–∏–Ω—å–∫–æ—Ñ—Ñ'))
                b3 = types.KeyboardButton(_('–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω'))
                b4 = types.KeyboardButton(_('–ü—Ä–æ—á–∏–µ'))
                b5 = types.KeyboardButton(_('–ù–∞–ª–∏—á–Ω—ã–µ'))
                if message.text == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'):
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞ —Å—á–µ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä—É–±–ª–∏:\n' \
                        '1. –°–±–µ—Ä–±–∞–Ω–∫\n' \
                        '2. –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n' \
                        '3. –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω\n' \
                        '4. –ù–∞–ª–∏—á–Ω—ã–µ\n' \
                        '5. –ü—Ä–æ—á–∏–µ\n')
                    markup.add(b1, b2, b3, b4, b5, mb)
                    data['OPER_FLAG_EUR_RUB_BACK'] = True
                elif message.text == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞ —Å—á–µ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤—Ç—å —Ä—É–±–ª–∏:\n' \
                        '1. –°–±–µ—Ä–±–∞–Ω–∫\n' \
                        '2. –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n' \
                        '3. –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω\n' \
                        '4. –ü—Ä–æ—á–∏–µ\n')
                    markup.add(b1, b2, b3, b4, mb)
                else:
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, —Å–æ —Å—á–µ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É–±–ª–∏:\n' \
                            '1. –°–±–µ—Ä–±–∞–Ω–∫\n' \
                            '2. –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n' \
                            '3. –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω\n' \
                            '4. –ù–∞–ª–∏—á–Ω—ã–µ\n' \
                            '5. –ü—Ä–æ—á–∏–µ\n')
                    markup.add(b1, b2, b3, b4, b5, mb)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # 2.1.2 –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
            elif (message.text == _('–ù–∞–ª–∏—á–Ω—ã–µ')) and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and (not data.get('BANK_FLAG')) and (not data.get('CASH_FLAG')):
                data['BANK_FLAG'] = True
                data['CASH_FLAG'] = True
                data['BANK_RE'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*CITY_CASH_BUTTONS, mb)
                mess = _('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥') if data.get('OPER_NAME_RE')==_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') else _('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif (message.text in CITY_CASH_BUTTONS) and (data.get('FORM_ORDER_FLAG')) and (
                    data.get('OPER_FLAG_EUR_RUB')) and (not data.get('OPER_FLAG_USDT_EURO')) and (data.get('BANK_FLAG')) and (data.get('CASH_FLAG')):
                data['CASH_CITY'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                order_city_buttons = form_order_city_buttons(_(CITY_BUTTONS))
                markup.add(*order_city_buttons, mb)
                mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif (message.text == _('–°–±–µ—Ä–±–∞–Ω–∫') and not data.get('OPER_FLAG_EUR_RUB_BACK')) and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and (not data.get('BANK_FLAG')):
                data['BANK_FLAG'] = True
                data['BANK_RE'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                order_city_buttons = form_order_city_buttons(_(CITY_BUTTONS)) if data.get('OPER_NAME_RE') != _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï') else form_order_city_buttons(_(kzt_bank_names))
                markup.add(*order_city_buttons, mb)
                mess1 = _(SBER_TEXT)
                if data.get('OPER_FLAG_EUR_RUB_BACK'):
                    mess2 = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥–∞—Ç—å –µ–≤—Ä–æ')
                elif data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    mess2 = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–∫, –Ω–∞ —Å—á–µ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–Ω–≥–µ')
                else:
                    mess2 = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É')
                bot.send_message(message.chat.id, mess1, parse_mode='html', reply_markup=markup)
                bot.send_message(message.chat.id, mess2, parse_mode='html', reply_markup=markup)
            elif (message.text in ru_bank_names) and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and (not data.get('BANK_FLAG')):
                data['BANK_FLAG'] = True
                data['BANK_RE'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                order_city_buttons = form_order_city_buttons(_(CITY_BUTTONS)) if data.get('OPER_NAME_RE') != _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï') else form_order_city_buttons(_(kzt_bank_names))
                markup.add(*order_city_buttons, mb)
                if data.get('OPER_FLAG_EUR_RUB_BACK'):
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥–∞—Ç—å –µ–≤—Ä–æ')
                elif data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–∫, –Ω–∞ —Å—á–µ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–Ω–≥–µ')
                else:
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # 2.1.3 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ (–∏–ª–∏ –±–∞–Ω–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è RUB=>KZT)
            elif (message.text == _('–î—Ä—É–≥–∞—è –ª–æ–∫–∞—Ü–∏—è')) and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) \
                    and (data.get('BANK_FLAG')) and (not data.get('CITY_RE_FLAG')) and (not data.get('ANOTHER_CITY_RE_FLAG')):
                data['ANOTHER_CITY_RE_FLAG'] = True
                mess = _('<b><em>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏</em></b>')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # 2.1.4 –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ –µ–≤—Ä–æ
            elif (message.text in cities or message.text in kzt_bank_names or data.get('ANOTHER_CITY_RE_FLAG')) and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) \
                    and (data.get('BANK_FLAG')) and (not data.get('CITY_RE_FLAG')):
                a = types.ReplyKeyboardRemove()
                data['CITY_RE_FLAG'] = True
                data['CITY_RE'] = message.text #–∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∞–Ω–∫, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è RUB=>KZT
                if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    mess = _(
                        '<b>–ö–∞–∫—É—é —Å—É–º–º—É –≤ —Ç–µ–Ω–≥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>\n<em>(–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤)</em>\n\n' \
                        '<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ 50000 —Ç–µ–Ω–≥–µ</b>\n')
                else:
                    if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'):
                        currency = '—Ä—É–±–ª—è—Ö'
                        currency2 = '–†–£–ë–õ–ï–ô'
                        lim1 = '10000'
                        lim2 = '50000'
                    else:
                        currency = '–µ–≤—Ä–æ'
                        currency2 = '–ï–í–†–û'
                        lim1 = '100'
                        lim2 = '500'
                    mess = _(
                        '<b>–ö–∞–∫—É—é —Å—É–º–º—É –≤ {currency} —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>\n<em>(–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤)</em>\n\n' \
                        '<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –≥–æ—Ä–æ–¥–∞:</b>\n' \
                        '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏, –ë–∞—Ä, –ë—É–¥–≤–∞, –¢–∏–≤–∞—Ç - {lim1} {currency2}\n' \
                        '–û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ - {lim2} {currency2}').format(currency=currency,
                                                                        currency2=currency2,
                                                                        lim1=lim1,
                                                                        lim2=lim2)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            # 2.1.5 –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏
            # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —Å—É–º–º—É –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 500 –µ–≤—Ä–æ
            elif ((not message.text.isdigit() or len(message.text) > 8) \
                or ((int(message.text) < 100 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') or int(message.text) < 10000 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò') or int(message.text) < 50000 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï')) and (data.get('CITY_RE') in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')] or data.get('CITY_RE') in kzt_bank_names)) \
                or ((int(message.text) < 500 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') or int(message.text) < 50000 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò')) and data.get('CITY_RE') not in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')])) \
                    and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (not data.get('OPER_FLAG_USDT_EURO')) and (data.get('BANK_FLAG')) \
                    and (data.get('CITY_RE_FLAG')) and (not data.get('SUM_RUB_FLAG')):
                a = types.ReplyKeyboardRemove()
                if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    mess = _(
                        '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                        '<b><em>1.–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤</em></b>.\n' \
                        '<b><em>2.–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ 50000 —Ç–µ–Ω–≥–µ</em></b>\n\n'\
                        '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>')
                else:
                    if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'):
                        currency = '—Ä—É–±–ª—è—Ö'
                        currency2 = '–†–£–ë–õ–ï–ô'
                        lim1 = '10000'
                        lim2 = '50000'
                    else:
                        currency = '–µ–≤—Ä–æ'
                        currency2 = '–ï–í–†–û'
                        lim1 = '100'
                        lim2 = '500'
                    mess = _(
                        '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                        '<b><em>1.–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤</em></b>.\n' \
                        '<b><em>2.–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ –•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏, –ë–∞—Ä–µ, –¢–∏–≤–∞—Ç–µ –∏ –ë—É–¥–≤–µ - {lim1} {currency2}, –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö - {lim2} {currency2}</em></b>.\n\n' \
                        '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>').format(lim1=lim1,
                                                                                                                                                        lim2=lim2,
                                                                                                                                                        currency2=currency2)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            # 2.1.6 –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–µ–Ω–∏
            elif ((message.text.isdigit() and len(message.text) <= 8) \
                and (((int(message.text) >= 100 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û')) or (int(message.text) >= 10000 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò')) or (int(message.text) >= 50000 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï')) and (data.get('CITY_RE') in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')] or data.get('CITY_RE') in kzt_bank_names)) \
                or ((int(message.text) >= 500 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û')) or (int(message.text) >= 50000 and data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò')) and data.get('CITY_RE') not in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')]))) \
                    and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (not data.get('OPER_FLAG_USDT_EURO')) and data.get('BANK_FLAG') \
                    and (data.get('CITY_RE_FLAG')) and (not data.get('SUM_RUB_FLAG')) and (not data.get('ORDER_TIME_FLAG_RE')) and (not data.get('ORDER_CONFIRM_RE_FLAG')):
                username = '@' + message.chat.username if message.chat.username is not None else message.chat.id
                eur_to_rub = int(message.text) * rates_funcs.get_fiat_rates_tradingview()['EUR_RUB']
                if (data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') and ((get_city_commission(city_name=data.get('CASH_CITY'), exch_sum=int(eur_to_rub), deal_type='–î–µ–ø–æ–∑–∏—Ç', currency='RUB')[0] is not None and data.get('CASH_FLAG')) or not data.get('CASH_FLAG')))\
                    or (data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò') and ((get_city_commission(city_name=data.get('CASH_CITY'), exch_sum=int(message.text), deal_type='–í—ã–¥–∞—á–∞', currency='RUB')[0] is not None and data.get('CASH_FLAG')) or not data.get('CASH_FLAG'))):
                    data['ORDER_TIME_FLAG_RE'] = True
                    data['SUM_RUB_FLAG'] = True
                    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
                    data['SUM_EUR_RE'] = int(message.text)
                    if data.get('OPER_FLAG_EUR_RUB_BACK'):
                        rub_info = rates_funcs.compute_to_rub_amount(currency_amount=data['SUM_EUR_RE'], currency_from='EUR_RUB', username=username, bank_name=data['BANK_RE'])
                    else:
                        rub_info = rates_funcs.compute_rub_euro_amount(euro_amount=data['SUM_EUR_RE'], username=username, cash_flag=data.get('CASH_FLAG'), bank_name=data['BANK_RE'])
                    data['RUB_INFO'] = dict(rub_info)  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã RUB_EURO –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ GSH
                    # –≤ SUM_RUB_RE, RUB_EURO_RATE –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                    data['SUM_RUB_RE'] = rub_info['rub_amount'] if data.get('OPER_NAME_RE')==_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') else rub_info['currency_from_amount']
                    data['RUB_EURO_RATE'] = rub_info['currency_rate'] #if CITY_RE != _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏') else rub_info['currency_rate'] + 1
                    msk_current_time = datetime.now(tz)
                    msk_minutes = msk_current_time.hour * 60 + msk_current_time.minute
                    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞: –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –º–∏–Ω—É—Ç—ã
                    time_borders = {
                        0 * 60: '00:00 - 02:00',
                        2 * 60: '02:00 - 04:00',
                        4 * 60: '04:00 - 06:00',
                        6 * 60: '06:00 - 08:00',
                        8 * 60: '08:00 - 10:00',
                        10 * 60: '10:00 - 12:00',
                        12 * 60: '12:00 - 14:00',
                        14 * 60: '14:00 - 16:00',
                        16 * 60: '16:00 - 18:00',
                        18 * 60: '18:00 - 20:00',
                        20 * 60: '20:00 - 22:00'
                    }
                    time_buttons = [types.KeyboardButton(time_period) for high_board, time_period in time_borders.items() if
                                    msk_minutes < high_board]
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(*time_buttons)
                    markup.add(types.KeyboardButton(_('–î—Ä—É–≥–æ–π –¥–µ–Ω—å')), mb)
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –í–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–¥–µ–ª–∫—É')  # –í—Ä–µ–º—è –ø–æ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏–∏
                elif data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    data['ORDER_TIME_FLAG_RE'] = True
                    data['SUM_RUB_FLAG'] = True
                    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
                    data['SUM_EUR_RE'] = int(message.text) # –∑–¥–µ—Å—å —Å—É–º–º–∞ –¢–ï–ù–ì–ï
                    rub_info = rates_funcs.compute_rub_kzt_amount(kzt_amount=data['SUM_EUR_RE'], username=username, bank_name=data['BANK_RE'])
                    data['RUB_INFO'] = dict(rub_info)  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã RUB_EURO –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ GSH
                    # –≤ SUM_RUB_RE, RUB_EURO_RATE –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                    data['SUM_RUB_RE'] = rub_info['rub_amount']
                    data['RUB_EURO_RATE'] = rub_info['currency_rate'] #if CITY_RE != _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏') else rub_info['currency_rate'] + 1
                    msk_current_time = datetime.now(tz)
                    msk_minutes = msk_current_time.hour * 60 + msk_current_time.minute
                    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞: –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –º–∏–Ω—É—Ç—ã
                    time_borders = {
                         0 * 60: '00:00 - 02:00',
                        2 * 60: '02:00 - 04:00',
                        4 * 60: '04:00 - 06:00',
                        6 * 60: '06:00 - 08:00',
                        8 * 60: '08:00 - 10:00',
                        10 * 60: '10:00 - 12:00',
                        12 * 60: '12:00 - 14:00',
                        14 * 60: '14:00 - 16:00',
                        16 * 60: '16:00 - 18:00',
                        18 * 60: '18:00 - 20:00',
                        20 * 60: '20:00 - 22:00'
                    }
                    time_buttons = [types.KeyboardButton(time_period) for high_board, time_period in time_borders.items() if
                                    msk_minutes < high_board]
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    markup.add(*time_buttons)
                    markup.add(types.KeyboardButton(_('–î—Ä—É–≥–æ–π –¥–µ–Ω—å')), mb)
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –í–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–¥–µ–ª–∫—É')  # –í—Ä–µ–º—è –ø–æ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏–∏
                else:
                    city_commission = get_city_commission(city_name=data['CASH_CITY'], exch_sum=int(message.text), deal_type='–î–µ–ø–æ–∑–∏—Ç', currency='RUB') if\
                    data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') else get_city_commission(city_name=data['CASH_CITY'], exch_sum=int(message.text), deal_type='–í—ã–¥–∞—á–∞', currency='RUB')
                    if city_commission[1] is not None:
                        mess = _(
                        '–î–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ –∏–ª–∏ –≤—ã–¥–∞—á–∏ —Ä—É–±–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ –≤ —Ä–∞–∑–º–µ—Ä–µ {city_commission} —Ä—É–±–ª–µ–π.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å–Ω–∞—á–∞–ª–∞.\n\n' \
                        '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>').format(city_commission=int(city_commission[1]))
                    else:
                        mess = _(
                        '–î–µ–ø–æ–∑–∏—Ç –∏–ª–∏ –≤—ã–¥–∞—á–∞ —Ä—É–±–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.\n\n' \
                        '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>').format(city_commission=city_commission[1])
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                    markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # 2.1.7. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
            elif (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (not data.get('OPER_FLAG_USDT_EURO')) and data.get('BANK_FLAG') \
                    and (data.get('CITY_RE_FLAG')) and (data.get('SUM_RUB_FLAG')) and (data.get('ORDER_TIME_FLAG_RE')) and (not data.get('FRIEND_REF_FLAG_RE')) and (
                    not data.get('ORDER_CONFIRM_RE_FLAG')):
                data['FRIEND_REF_FLAG_RE'] = True
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
                data['ORDER_TIME_RE'] = message.text
                if (username not in ACTIVE_CONTACT_LIST) and (user_id not in all_user_ids):
                    existed_disc_codes = [one_doc['Discount_Number'] for one_doc in ACTIVE_CONTACT_LIST.values()]
                    existed_ref_codes = [one_doc['Referral_Number'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Referral_Number' in one_doc]
                    while True:
                        s = string.ascii_lowercase + string.ascii_uppercase + string.digits
                        disc_code = ''.join(random.sample(s, 4))
                        ref_code = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
                        if disc_code not in existed_disc_codes and ref_code not in existed_ref_codes:
                            break
                    discount = '0%'
                    referal_mess = _('–í—ã –≤–ø–µ—Ä–≤—ã–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É.\n' \
                                    '–í–∞—à –∫–æ–¥ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{disc_code}</em></b>\n' \
                                    '–í–∞—à –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{ref_code}</em></b>\n' \
                                    '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {discount}\n\n' \
                                    '<b>–ü—Ä–æ—Å—å–±–∞ –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:\n' \
                                    '1. –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥\n' \
                                    '2. –í–≤–µ—Å—Ç–∏ –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π (4 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π (6 —Å–∏–º–≤–æ–ª–æ–≤) –∫–æ–¥ –¥—Ä—É–≥–∞</b>').format(
                        disc_code=disc_code,
                        ref_code=ref_code,
                        discount=discount)
                    write_contact(TG_Contact=username, user_ID=message.from_user.id, NameSurname=message.from_user.full_name,
                                AccTypeFROM=data['BANK_RE'], CurrFROM='RUB',
                                City=data.get('CITY_RE'), ContactType='–ö–ª–∏–µ–Ω—Ç', ContactDealer='Alpha_TG_Bot', CurrStatus='–ê–∫—Ç–∏–≤–Ω—ã–π',
                                Discount_Number=disc_code, Referral_Number=ref_code)
                else:
                    if username in ACTIVE_CONTACT_LIST:
                        disc_code = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                        ref_code = ACTIVE_CONTACT_LIST[username]['Referral_Number']
                        discount = str(float(ACTIVE_CONTACT_LIST[username]['Discount'].replace(',','.'))*100) + '%'
                    else:
                        userids_names = {user_info['user_ID']: username for username, user_info in ACTIVE_CONTACT_LIST.items()}
                        disc_code = ACTIVE_CONTACT_LIST[userids_names[user_id]]['Discount_Number']
                        ref_code = ACTIVE_CONTACT_LIST[userids_names[user_id]]['Referral_Number']
                        discount = str(float(ACTIVE_CONTACT_LIST[userids_names[user_id]]['Discount'].replace(',','.'))*100) + '%'
                    referal_mess = _('–í–∞—à –∫–æ–¥ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{disc_code}</em></b>\n' \
                                    '–í–∞—à –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{ref_code}</em></b>\n' \
                                    '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: <b><em>{discount}</em></b>\n\n' \
                                    '<b>–ü—Ä–æ—Å—å–±–∞ –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:\n' \
                                    '1. –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥\n' \
                                    '2. –í–≤–µ—Å—Ç–∏ –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π <em>(4 —Å–∏–º–≤–æ–ª–∞)</em> –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π <em>(6 —Å–∏–º–≤–æ–ª–æ–≤)</em> –∫–æ–¥ –¥—Ä—É–≥–∞</b>').format(
                        disc_code=disc_code,
                        ref_code=ref_code,
                        discount=discount)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥'))
                b2 = types.KeyboardButton(_('–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥—Ä—É–≥–∞'))
                b3 = types.KeyboardButton(_('–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞'))
                markup.add(b1, b2, b3, mb) if username in ACTIVE_CONTACT_LIST and ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else markup.add(b1, b2, mb)
                bot.send_message(message.chat.id, referal_mess, parse_mode='html', reply_markup=markup)
            # 2.1.8.2 –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥—Ä—É–≥–∞
            elif message.text == _('–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥—Ä—É–≥–∞') and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and data.get('BANK_FLAG') \
                    and (data.get('CITY_RE_FLAG')) and (data.get('SUM_RUB_FLAG')) and (data.get('ORDER_TIME_FLAG_RE')) and (data.get('FRIEND_REF_FLAG_RE')) and (
                    not data.get('ORDER_CONFIRM_RE_FLAG')):
                a = types.ReplyKeyboardRemove()
                mess = _(
                    '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π <em>(4 —Å–∏–º–≤–æ–ª–∞)</em> –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π <em>(6 —Å–∏–º–≤–æ–ª–æ–≤)</em> –ø—Ä–æ–≥—Ä–∞–º–º—ã –í–∞—à–µ–≥–æ –¥—Ä—É–≥–∞</b>')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            elif (message.text == _('–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥') and data.get('FRIEND_REF_FLAG_RE')) or (data.get('FORM_ORDER_FLAG')) and not data.get('FIND_USER_FLAG') and message.text != _('–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞') and (
                    data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and data.get('BANK_FLAG') \
                    and (data.get('CITY_RE_FLAG')) and (data.get('SUM_RUB_FLAG')) and (data.get('ORDER_TIME_FLAG_RE')) and (data.get('FRIEND_REF_FLAG_RE')) and (
                    not data.get('RES_ORDER_FLAG_RE')) and (not data.get('ORDER_CONFIRM_RE_FLAG')):
                a = types.ReplyKeyboardRemove()
                data['RES_ORDER_FLAG_RE'] = True
                data['ORDER_CONFIRM_RE_FLAG'] = True
                DOCS_FLAG = True
                #ACTIVE_CONTACT_LIST = scrab_contact_list()  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ —Å—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
                disc_values = {one_doc['Discount_Number']: one_doc['Discount'] for one_doc in ACTIVE_CONTACT_LIST.values() if
                            'Discount' in one_doc}
                disc_nicks = {one_doc['Discount_Number']: nick for nick, one_doc in ACTIVE_CONTACT_LIST.items() if 'Discount_Number' in one_doc}
                disc_ids = {one_doc['Discount_Number']: one_doc['user_ID'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Discount_Number' in one_doc}
                refs_nicks = {one_doc['Referral_Number']: nick for nick, one_doc in ACTIVE_CONTACT_LIST.items() if 'Referral_Number' in one_doc}
                refs_ids = {one_doc['Referral_Number']: one_doc['user_ID'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Referral_Number' in one_doc}
                if message.text == _('–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥'):
                    data['REF_CODE_RE'] = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                else:
                    data['REF_CODE_RE'] = message.text
                if len(data.get('REF_CODE_RE')) == 4 and data.get('REF_CODE_RE').strip() in disc_values:
                    data['DISCOUNT_RE'] = disc_values[data['REF_CODE_RE']]
                    disc_status_mess = _('–î–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥ <b><em>{REF_CODE_RE}</em></b> –Ω–∞–π–¥–µ–Ω.\n' \
                                        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{user_nick} (ID: {user_id})\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em></b>').format(
                        REF_CODE_RE=data['REF_CODE_RE'],
                        user_nick=disc_nicks[data['REF_CODE_RE']],
                        user_id=disc_ids[data['REF_CODE_RE']])
                elif len(data.get('REF_CODE_RE')) == 6 and data.get('REF_CODE_RE').strip() in refs_nicks and data.get('REF_CODE_RE') != ACTIVE_CONTACT_LIST[username]['Referral_Number']:
                    data['DISCOUNT_RE'] = ACTIVE_CONTACT_LIST[username]['Discount']
                    disc_status_mess = _('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ <b><em>{REF_CODE_RE}</em></b> –Ω–∞–π–¥–µ–Ω.\n' \
                                        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{user_nick} (ID: {user_id})</em></b>\n\n' \
                                        '<em>–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –í–∞–º —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏!\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em>').format(
                        REF_CODE_RE=REF_CODE_RE,
                        user_nick=refs_nicks[REF_CODE_RE],
                        user_id=refs_ids[REF_CODE_RE])
                elif data.get('REF_CODE_RE') == ACTIVE_CONTACT_LIST[username]['Referral_Number']:
                    data['DISCOUNT_RE'] = ACTIVE_CONTACT_LIST[username]["Discount"]
                    disc_status_mess = _('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ <b><em>{REF_CODE_RE}</em></b> –≤ —Å–≤–æ–∏—Ö —Å–¥–µ–ª–∫–∞—Ö.\n' \
                                        '–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –í–∞—à –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥ <b>{disc_code}</b>,' \
                                        ' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–∫–∏–¥–∫—É <b>{disc}%.</b>\n\n' \
                                        '<em>–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –í–∞–º —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏!\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em>').format(
                        REF_CODE_RE=data['REF_CODE_RE'],
                        disc_code=ACTIVE_CONTACT_LIST[username]["Discount_Number"],
                        disc=str(float(ACTIVE_CONTACT_LIST[username]["Discount"].replace(',','.'))*100))
                    data['REF_CODE_RE'] = ACTIVE_CONTACT_LIST[username]["Discount_Number"]
                else:
                    data['DISCOUNT_RE'] = ACTIVE_CONTACT_LIST[username]["Discount"]
                    disc_status_mess = _('–ö–æ–¥ <b><em>{REF_CODE_RE}</em></b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n' \
                                        '–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –í–∞—à –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥ <b>{disc_code}</b>,' \
                                        ' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–∫–∏–¥–∫—É <b>{disc}%.</b>\n\n' \
                                        '<em>–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –í–∞–º —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏!\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em>').format(
                        REF_CODE_RE=data['REF_CODE_RE'],
                        disc_code=ACTIVE_CONTACT_LIST[username]["Discount_Number"],
                        disc=str(float(ACTIVE_CONTACT_LIST[username]["Discount"].replace(',','.'))*100))
                    data['REF_CODE_RE'] = ACTIVE_CONTACT_LIST[username]["Discount_Number"]
                if data.get('CASH_FLAG'):
                    city_commission = get_city_commission(city_name=data['CASH_CITY'], exch_sum=int(data['SUM_EUR_RE']), deal_type='–í—ã–¥–∞—á–∞', currency='RUB')[0]/100 if data.get('OPER_NAME_RE')==_('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò')\
                    else get_city_commission(city_name=data['CASH_CITY'], exch_sum=data['SUM_EUR_RE']*data['RUB_EURO_RATE'], deal_type='–î–µ–ø–æ–∑–∏—Ç', currency='RUB')[0]/100
                else:
                    city_commission = 0
                if data.get('OPER_NAME_RE') in ['–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò']:
                    discount = 1 + float(data['DISCOUNT_RE'].replace(',', '.')) / 100
                else:
                    discount = 1 - float(data['DISCOUNT_RE'].replace(',', '.')) / 100
                data['RUB_EURO_RATE'] = round(data['RUB_EURO_RATE'] * (1 - city_commission) * discount, 3)
                data['SUM_RUB_RE'] = round(data['SUM_EUR_RE'] / data['RUB_EURO_RATE']) if data.get('OPER_NAME_RE')==_('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò') else round(data['SUM_EUR_RE'] * data['RUB_EURO_RATE'])
                if data.get('CASH_FLAG') is True:
                    if data.get('OPER_FLAG_EUR_RUB_BACK'):
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                        '<em>–í–∞—à –ë–∞–Ω–∫-–ø–æ–ª—É—á–∞—Ç–µ–ª—å:</em> {BANK_RE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (EUR/RUB):</em> {RUB_EURO_RATE}\n' \
                                        '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                        '<em>–°—É–º–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –µ–≤—Ä–æ:</em> {SUM_RUB_RE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_EUR_RE}\n' \
                                        '<em>–ú–µ—Å—Ç–æ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {CASH_CITY}\n' \
                                        '<em>–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏:</em> {CITY_RE}\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(
                        OPER_NAME_RE=data.get('OPER_NAME_RE'),
                        BANK_RE=data['BANK_RE'],
                        RUB_EURO_RATE=data['RUB_EURO_RATE'],
                        SUM_EUR_RE=data['SUM_EUR_RE'],
                        SUM_RUB_RE=data['SUM_RUB_RE'],
                        CASH_CITY=data['CASH_CITY'],
                        CITY_RE=data.get('CITY_RE'),
                        ORDER_TIME_RE=data['ORDER_TIME_RE'])
                    else:
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                            '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                            '<em>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</em> {BANK_RE}\n' \
                                            '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (EUR/RUB):</em> {RUB_EURO_RATE}\n' \
                                            '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                            '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –µ–≤—Ä–æ:</em> {SUM_EUR_RE}\n' \
                                            '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_RUB_RE}\n' \
                                            '<em>–ú–µ—Å—Ç–æ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {CASH_CITY}\n' \
                                            '<em>–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏:</em> {CITY_RE}\n' \
                                            '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                            '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n\n').format(
                            OPER_NAME_RE=data.get('OPER_NAME_RE'),
                            BANK_RE=data['BANK_RE'],
                            RUB_EURO_RATE=data['RUB_EURO_RATE'],
                            SUM_EUR_RE=data['SUM_EUR_RE'],
                            SUM_RUB_RE=data['SUM_RUB_RE'],
                            CASH_CITY=data['CASH_CITY'],
                            CITY_RE=data.get('CITY_RE'),
                            ORDER_TIME_RE=data['ORDER_TIME_RE'])
                else:
                    if data.get('OPER_FLAG_EUR_RUB_BACK'):
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                        '<em>–í–∞—à –ë–∞–Ω–∫-–ø–æ–ª—É—á–∞—Ç–µ–ª—å:</em> {BANK_RE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (EUR/RUB):</em> {RUB_EURO_RATE}\n' \
                                        '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                        '<em>–°—É–º–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –µ–≤—Ä–æ:</em> {SUM_RUB_RE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_EUR_RE}\n' \
                                        '<em>–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏:</em> {CITY_RE}\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(
                        OPER_NAME_RE=data.get('OPER_NAME_RE'),
                        BANK_RE=data['BANK_RE'],
                        RUB_EURO_RATE=data['RUB_EURO_RATE'],
                        SUM_EUR_RE=data['SUM_EUR_RE'],
                        SUM_RUB_RE=data['SUM_RUB_RE'],
                        CITY_RE=data.get('CITY_RE'),
                        ORDER_TIME_RE=data['ORDER_TIME_RE'])
                    else:
                        if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                            currency = _('KZT')
                            currency1 = _('—Ç–µ–Ω–≥–µ')
                            city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
                        else:
                            currency = _('EUR')
                            currency1 = _('–µ–≤—Ä–æ')
                            city_or_bank = _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                            '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                            '<em>–í–∞—à –ë–∞–Ω–∫-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</em> {BANK_RE}\n' \
                                            '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å ({currency}/RUB):</em> {RUB_EURO_RATE}\n' \
                                            '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                            '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency1}:</em> {SUM_EUR_RE}\n' \
                                            '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_RUB_RE}\n' \
                                            '<em>{city_or_bank}:</em> {CITY_RE}\n' \
                                            '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                            '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(
                            OPER_NAME_RE=data.get('OPER_NAME_RE'),
                            BANK_RE=data['BANK_RE'],
                            RUB_EURO_RATE=data['RUB_EURO_RATE'],
                            SUM_EUR_RE=data['SUM_EUR_RE'],
                            SUM_RUB_RE=data['SUM_RUB_RE'],
                            CITY_RE=data.get('CITY_RE'),
                            ORDER_TIME_RE=data['ORDER_TIME_RE'],
                            currency=currency,
                            currency1=currency1,
                            city_or_bank=city_or_bank)
                client_warning_mess = _(
                    '<b>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –∑–∞—è–≤–∫—É, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π' \
                    ' –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <em>/documents</em></b>\n\n')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–î–∞'))
                b2 = types.KeyboardButton(_('–ù–µ—Ç'))
                markup.add(b1, b2)
                bot.send_message(message.chat.id, disc_status_mess, parse_mode='html', reply_markup=a)
                bot.send_message(message.chat.id, client_order_mess, parse_mode='html', reply_markup=markup)
                bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
            # 2.1.8.3 –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ 
            elif message.text == _('–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞') and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and data.get('BANK_FLAG') \
                    and (data.get('CITY_RE_FLAG')) and (data.get('SUM_RUB_FLAG')) and (data.get('ORDER_TIME_FLAG_RE')) and (data.get('FRIEND_REF_FLAG_RE')) and (
                    not data.get('ORDER_CONFIRM_RE_FLAG')):
                data['FIND_USER_FLAG'] = True
                mess = _('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞, –Ω–∞—á–∏–Ω–∞—è —Å "@"')
                markup = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif data.get('FIND_USER_FLAG') and message.text in ACTIVE_CONTACT_LIST and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and data.get('BANK_FLAG') \
                    and (data.get('CITY_RE_FLAG')) and (data.get('SUM_RUB_FLAG')) and (data.get('ORDER_TIME_FLAG_RE')) and (data.get('FRIEND_REF_FLAG_RE')) and (
                    not data.get('ORDER_CONFIRM_RE_FLAG')):
                data['RES_ORDER_FLAG_RE'] = True
                data['ORDER_CONFIRM_RE_FLAG'] = True
                add_username = message.text
                disc_code = ACTIVE_CONTACT_LIST[message.text]["Discount_Number"]
                disc_status_mess = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.\n' \
                                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{user_nick} (–¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥: {disc_code})\n\n' \
                                    '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em></b>').format(
                    user_nick=message.text,
                    disc_code=disc_code)
                if data.get('OPER_FLAG_EUR_RUB_BACK'):
                    client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                    '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                    '<em>–í–∞—à –ë–∞–Ω–∫-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</em> {BANK_RE}\n' \
                                    '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (EUR/RUB):</em> {RUB_EURO_RATE}\n' \
                                    '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                    '<em>–°—É–º–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –µ–≤—Ä–æ:</em> {SUM_EUR_RE}\n' \
                                    '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_RUB_RE}\n' \
                                    '<em>–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏:</em> {CITY_RE}\n' \
                                    '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                    '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(
                    OPER_NAME_RE=data.get('OPER_NAME_RE'),
                    BANK_RE=data['BANK_RE'],
                    RUB_EURO_RATE=data['RUB_EURO_RATE'],
                    SUM_EUR_RE=data['SUM_EUR_RE'],
                    SUM_RUB_RE=data['SUM_RUB_RE'],
                    CITY_RE=data.get('CITY_RE'),
                    ORDER_TIME_RE=data['ORDER_TIME_RE'])
                else:
                    if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                        currency = _('KZT')
                        currency1 = _('—Ç–µ–Ω–≥–µ')
                        city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
                    else:
                        currency = _('EUR')
                        currency1 = _('–µ–≤—Ä–æ')
                        city_or_bank = _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                    client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                        '<em>–í–∞—à –ë–∞–Ω–∫-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</em> {BANK_RE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å ({currency}/RUB):</em> {RUB_EURO_RATE}\n' \
                                        '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                        '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency1}:</em> {SUM_EUR_RE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_RUB_RE}\n' \
                                        '<em>{city_or_bank}:</em> {CITY_RE}\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(
                        OPER_NAME_RE=data.get('OPER_NAME_RE'),
                        BANK_RE=data['BANK_RE'],
                        RUB_EURO_RATE=data['RUB_EURO_RATE'],
                        SUM_EUR_RE=data['SUM_EUR_RE'],
                        SUM_RUB_RE=data['SUM_RUB_RE'],
                        CITY_RE=data.get('CITY_RE'),
                        ORDER_TIME_RE=data['ORDER_TIME_RE'],
                        currency=currency,
                        currency1=currency1,
                        city_or_bank=city_or_bank)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–î–∞'))
                b2 = types.KeyboardButton(_('–ù–µ—Ç'))
                markup.add(b1, b2)
                client_warning_mess = _(
                    '<b>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –∑–∞—è–≤–∫—É, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π' \
                    ' –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <em>/documents</em></b>\n\n')
                bot.send_message(message.chat.id, disc_status_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(message.chat.id, client_order_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
            elif data.get('FIND_USER_FLAG') and message.text not in ACTIVE_CONTACT_LIST and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_EUR_RUB')) and (
                    not data.get('OPER_FLAG_USDT_EURO')) and data.get('BANK_FLAG') \
                    and (data.get('CITY_RE_FLAG')) and (data.get('SUM_RUB_FLAG')) and (data.get('ORDER_TIME_FLAG_RE')) and (data.get('FRIEND_REF_FLAG_RE')) and (
                    not data.get('ORDER_CONFIRM_RE_FLAG')):
                if not data.get('NAME_FLAG'):
                    data['NAME_FLAG'] = True
                    add_username = message.text
                    mess = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–º—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.')
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                elif data.get('NAME_FLAG'):
                    data['NAME_FLAG'] = False
                    data['RES_ORDER_FLAG_RE'] = True
                    data['ORDER_CONFIRM_RE_FLAG'] = True
                    username = '@' + message.chat.username if message.chat.username is not None else 'None'
                    existed_disc_codes = [one_doc['Discount_Number'] for one_doc in ACTIVE_CONTACT_LIST.values()]
                    existed_ref_codes = [one_doc['Referral_Number'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Referral_Number' in one_doc]
                    while True:
                        s = string.ascii_lowercase + string.ascii_uppercase + string.digits
                        disc_code = ''.join(random.sample(s, 4))
                        if disc_code not in existed_disc_codes:
                            break
                    while True:
                        ref_code = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
                        if ref_code not in existed_ref_codes:
                            break
                    write_contact(TG_Contact=add_username, user_ID='', NameSurname=message.text, AccTypeFROM='', CurrFROM='USDT', 
                                  City=data.get('CITY_RE'), ContactType='–ö–ª–∏–µ–Ω—Ç', ContactDealer=username, CurrStatus='–ê–∫—Ç–∏–≤–Ω—ã–π',
                                  Discount_Number=disc_code, Referral_Number=ref_code)
                    disc_status_mess = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.\n' \
                                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{add_username}</em></b> (–¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥: {disc_code})').format(
                                                                                                                                            add_username=add_username,
                                                                                                                                            disc_code=disc_code)
                    if data.get('OPER_FLAG_EUR_RUB_BACK'):
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                        '<em>–í–∞—à –ë–∞–Ω–∫-–ø–æ–ª—É—á–∞—Ç–µ–ª—å:</em> {BANK_RE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (EUR/RUB):</em> {RUB_EURO_RATE}\n' \
                                        '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                        '<em>–°—É–º–º–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –µ–≤—Ä–æ:</em> {SUM_RUB_RE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_EUR_RE}\n' \
                                        '<em>–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏:</em> {CITY_RE}\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(
                        OPER_NAME_RE=data.get('OPER_NAME_RE'),
                        BANK_RE=data['BANK_RE'],
                        RUB_EURO_RATE=data['RUB_EURO_RATE'],
                        SUM_EUR_RE=data['SUM_EUR_RE'],
                        SUM_RUB_RE=data['SUM_RUB_RE'],
                        CITY_RE=data.get('CITY_RE'),
                        ORDER_TIME_RE=data['ORDER_TIME_RE'])
                    else:
                        if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                            currency = _('KZT')
                            currency1 = _('—Ç–µ–Ω–≥–µ')
                            city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
                        else:
                            currency = _('EUR')
                            currency1 = _('–µ–≤—Ä–æ')
                            city_or_bank = _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                            '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_RE}\n' \
                                            '<em>–í–∞—à –ë–∞–Ω–∫-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</em> {BANK_RE}\n' \
                                            '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å ({currency}/RUB):</em> {RUB_EURO_RATE}\n' \
                                            '<b>–ö—É—Ä—Å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–∏–≤–Ω—ã–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏</b>\n' \
                                            '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency1}:</em> {SUM_EUR_RE}\n' \
                                            '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_RUB_RE}\n' \
                                            '<em>{city_or_bank}:</em> {CITY_RE}\n' \
                                            '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n\n' \
                                            '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(
                            OPER_NAME_RE=data.get('OPER_NAME_RE'),
                            BANK_RE=data['BANK_RE'],
                            RUB_EURO_RATE=data['RUB_EURO_RATE'],
                            SUM_EUR_RE=data['SUM_EUR_RE'],
                            SUM_RUB_RE=data['SUM_RUB_RE'],
                            CITY_RE=data.get('CITY_RE'),
                            ORDER_TIME_RE=data['ORDER_TIME_RE'],
                            currency=currency,
                            currency1=currency1,
                            city_or_bank=city_or_bank)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                    b1 = types.KeyboardButton(_('–î–∞'))
                    b2 = types.KeyboardButton(_('–ù–µ—Ç'))
                    markup.add(b1, b2)
                    client_warning_mess = _(
                        '<b>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –∑–∞—è–≤–∫—É, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π' \
                        ' –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <em>/documents</em></b>\n\n')
                    bot.send_message(message.chat.id, disc_status_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                    bot.send_message(message.chat.id, client_order_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                    bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
            # 2.1.7 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
            # –î–∞
            elif message.text == _('–î–∞') and data.get('FORM_ORDER_FLAG') and data.get('OPER_FLAG_EUR_RUB') and (not data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('BANK_FLAG') and data.get('SUM_RUB_FLAG') and data.get('CITY_RE_FLAG') and data.get('ORDER_CONFIRM_RE_FLAG'):
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                if add_username == '':
                    from_id = message.from_user.id
                    first_name = message.from_user.first_name
                    username = '@' + message.chat.username if message.chat.username is not None else '-'
                else:
                    if 'user_ID' in ACTIVE_CONTACT_LIST[add_username].keys():
                        from_id = ACTIVE_CONTACT_LIST[add_username]['user_ID']
                    else:
                        from_id = '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                    first_name = ACTIVE_CONTACT_LIST[add_username]['NameSurname']
                    username = add_username
                    data['REF_CODE_RE'] = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                dealer = ACTIVE_CONTACT_LIST[username]['ContactDealer']
                client_mess = _('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {ContactDealer}.').format(
                    ContactDealer=dealer)
                date = datetime.now(tz).strftime('%d.%m.%Y')
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'r', encoding='utf8') as f:
                    DealID_num = json.load(f)
                    DealID_num["EX"] += 0.0000001
                    DealID = "EX" + (str(format(DealID_num["EX"], '.7f'))).replace('.','')
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'w', encoding='utf8') as f:
                    json.dump(DealID_num, f, ensure_ascii=False, indent=2)
                # date = datetime.utcfromtimestamp(message.json['date']).strftime('%Y-%m-%d %H:%M:%S')
                # TODO: –ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨
                if data.get('OPER_FLAG_EUR_RUB_BACK'):
                    operator_mess = '<em>–ò—Å—Ç–æ—á–Ω–∏–∫:</em> Alpha_TG_Bot\n' \
                                '<em>–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞:</em> {DealID}\n' \
                                '<em>–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏:</em> <b>#{CITY_RE}</b>\n' \
                                '<em>–ö–ª–∏–µ–Ω—Ç –æ—Ç–¥–∞—Å—Ç –≤ –µ–≤—Ä–æ:</em> <b>{SUM_RUB_RE}</b>\n' \
                                '<em>–ë–∞–Ω–∫-–ø–æ–ª—É—á–∞—Ç–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–µ:</em> <b>{BANK_RE}</b>\n' \
                                '<em>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</em> {first_name}\n' \
                                '<em>ID –∫–ª–∏–µ–Ω—Ç–∞:</em> {from_id}\n' \
                                '<em>–ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:</em> {REF_CODE_RE}\n' \
                                '<em>–ù–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:</em> {username}\n' \
                                '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> <b>{OPER_NAME_RE}</b>\n' \
                                '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (RUB/EUR):</em> {RUB_EURO_RATE}\n' \
                                '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_EUR_RE}\n' \
                                '<em>–ì–æ—Ä–æ–¥ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {CASH_CITY}\n' \
                                '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n' \
                                '<em>–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:</em> {date}\n' \
                                '<em>–ö—Ç–æ —Å–≤—è–∂–µ—Ç—Å—è –ø–æ –æ–±–º–µ–Ω—É:</em> {dealer}'.format(DealID=DealID,
                                                                                    first_name=first_name,
                                                                                    from_id=from_id,
                                                                                    REF_CODE_RE=data['REF_CODE_RE'],
                                                                                    username=username,
                                                                                    OPER_NAME_RE=data.get('OPER_NAME_RE'),
                                                                                    BANK_RE=data['BANK_RE'],
                                                                                    RUB_EURO_RATE=data['RUB_EURO_RATE'],
                                                                                    SUM_EUR_RE=data['SUM_EUR_RE'],
                                                                                    SUM_RUB_RE=data['SUM_RUB_RE'],
                                                                                    CITY_RE=data.get('CITY_RE'),
                                                                                    ORDER_TIME_RE=data['ORDER_TIME_RE'],
                                                                                    date=date,
                                                                                    CASH_CITY=data['CASH_CITY'],
                                                                                    dealer=dealer)
                else:
                    if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                        currency = _('KZT')
                        currency1 = _('—Ç–µ–Ω–≥–µ')
                        city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
                    else:
                        currency = _('EUR')
                        currency1 = _('–µ–≤—Ä–æ')
                        city_or_bank = _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                    operator_mess = '<em>–ò—Å—Ç–æ—á–Ω–∏–∫:</em> Alpha_TG_Bot\n' \
                                    '<em>–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞:</em> {DealID}\n' \
                                    '<em>{city_or_bank}:</em> <b>#{CITY_RE}</b>\n' \
                                    '<em>–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç –≤ {currency1}:</em> <b>{SUM_EUR_RE}</b>\n' \
                                    '<em>–ë–∞–Ω–∫-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞/–ù–∞–ª–∏—á–Ω—ã–µ:</em> <b>{BANK_RE}</b>\n' \
                                    '<em>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</em> {first_name}\n' \
                                    '<em>ID –∫–ª–∏–µ–Ω—Ç–∞:</em> {from_id}\n' \
                                    '<em>–ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:</em> {REF_CODE_RE}\n' \
                                    '<em>–ù–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:</em> {username}\n' \
                                    '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> <b>{OPER_NAME_RE}</b>\n' \
                                    '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å ({currency}/RUB):</em> {RUB_EURO_RATE}\n' \
                                    '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:</em> {SUM_RUB_RE}\n' \
                                    '<em>–ì–æ—Ä–æ–¥ –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {CASH_CITY}\n' \
                                    '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_RE}\n' \
                                    '<em>–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:</em> {date}\n' \
                                    '<em>–ö—Ç–æ —Å–≤—è–∂–µ—Ç—Å—è –ø–æ –æ–±–º–µ–Ω—É:</em> {dealer}'.format(DealID=DealID,
                                                                                    first_name=first_name,
                                                                                        from_id=from_id,
                                                                                        REF_CODE_RE=data['REF_CODE_RE'],
                                                                                        username=username,
                                                                                        OPER_NAME_RE=data.get('OPER_NAME_RE'),
                                                                                        BANK_RE=data['BANK_RE'],
                                                                                        RUB_EURO_RATE=data['RUB_EURO_RATE'],
                                                                                        SUM_EUR_RE=data['SUM_EUR_RE'],
                                                                                        SUM_RUB_RE=data['SUM_RUB_RE'],
                                                                                        CASH_CITY=data['CASH_CITY'],
                                                                                        CITY_RE=data.get('CITY_RE'),
                                                                                        ORDER_TIME_RE=data['ORDER_TIME_RE'],
                                                                                        date=date,
                                                                                        city_or_bank=city_or_bank,
                                                                                        currency=currency,
                                                                                        currency1=currency1,
                                                                                        dealer=dealer)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, client_mess, parse_mode='html', reply_markup=markup)
                bot.send_message(GROUP_CHAT_ID, operator_mess, parse_mode='html', reply_markup=a)
                if data.get('OPER_NAME_RE') ==_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') and int(data['SUM_EUR_RE']) < 1000 or data.get('OPER_NAME_RE') ==_('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò') and int(data['SUM_EUR_RE']) < 100000:
                    client_mess1 = _('–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–º–µ–Ω–∞ –¥–ª—è —Å—É–º–º –æ–±–º–µ–Ω–∞ –º–µ–Ω–µ–µ 1000 –µ–≤—Ä–æ'
                                     ' –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–º –¥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è. –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'
                                     ' –≤–æ–ø—Ä–æ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–µ–Ω–µ–≥ –∫—É—Ä–∞—Ç–æ—Ä–æ–º –∏/–∏–ª–∏ –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ª–∏—á–Ω–æ–π –±–µ—Å–µ–¥–µ –≤ –¢–ì.')
                    bot.send_message(message.chat.id, client_mess1, parse_mode='html', reply_markup=markup)
                dealer = ACTIVE_CONTACT_LIST[username]['ContactDealer']
                if len(data['REF_CODE_RE']) != 6:
                    partner = ''
                    partner_flag = False
                else:
                    for tg_nick, values in ACTIVE_CONTACT_LIST.items():
                        if values['Referral_Number'] == data['REF_CODE_RE']:
                            partner = tg_nick
                            partner_flag = True
                            break
                usdt_eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                if data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –ï–í–†–û –Ω–∞ –†–£–ë–õ–ò'):
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'EUR=>RUB', 'RUB=>EUR', 'RUB', data['SUM_EUR_RE'], data['BANK_RE'], '',
                            data['RUB_EURO_RATE'], '/',
                            'EUR', '–ù–∞–ª–∏—á–Ω—ã–µ', '', username, data['REF_CODE_RE'], data.get('CITY_RE'), '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '',
                            '', '', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'EUR=>RUB', 'RUB=>USDT', 'USDT', data['SUM_EUR_RE'], 'Bybit', '',
                            data['RUB_INFO']['p2p_rub_usdt'], '/',
                            'RUB', '–¢–∏–Ω—å–∫–æ—Ñ—Ñ', '', '', '', '', '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', 'eurrub2', '', '', '', '')
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'EUR=>RUB', 'RUB=>EUR', 'EUR', data['SUM_EUR_RE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '',
                            data['RUB_INFO']['usdt_eur_rate'],
                            '*', 'EUR', '–ù–∞–ª–∏—á–Ω—ã–µ', '', '', '', '', 'NEW', '', '', '', '', '',
                            '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', 'eurrub3', 'VPR in 3', '', '', '')
                    calculate_indexes(deal_type='ER', partner_flag=partner_flag, eur_rate='')
                elif data.get('OPER_NAME_RE') == _('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –¢–ï–ù–ì–ï'):
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'RUB=>KZT', 'KZT=>RUB', 'KZT', data['SUM_EUR_RE'], data.get('CITY_RE'), '', data['RUB_EURO_RATE'], '*',
                            'RUB', data['BANK_RE'], '', username, data['REF_CODE_RE'], 'offline', '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', '', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'RUB=>KZT', 'RUB=>USDT', 'RUB', '', data['BANK_RE'], '', data['RUB_INFO']['p2p_rub_usdt'],
                            '/', 'USDT', 'Binance', '', '', '', '', '', '', '', '', '', '',
                            '', '–ü–ª–∞–Ω', '', '', '', '', '', '', '')  # –∫—É—Ä—Å rub usdt #–¥–æ–±–∞–≤–∏—Ç—å Binance, –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞(–æ–≤) + –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'RUB=>KZT', 'USDT=>KZT', 'USDT', data['SUM_EUR_RE'], 'Binance',
                            '', data['RUB_INFO']['usdt_euro_rate'], '/', 'KZT', data.get('CITY_RE'), '', '', '', '', '', '', '', '', '', '',
                            '', '–ü–ª–∞–Ω', '', '', 'rubeur', '', '', '', '')  # –¥–æ–±–∞–≤–∏—Ç—å Binance, –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞(–æ–≤) + –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'RUB=>KZT', 'USDT=>USDT', 'USDT', 'rubkzt4', 'Binance',
                            '', '', '/', 'USDT', '–ù–∞–ª–∏—á–Ω—ã–µ', '', '', '', '', 'VPR', '', '', '', '', '',
                            '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', 'rubeur4', 'VPR in 4', '', '', '')
                    eur_rate = rates_funcs.get_fiat_rates_tradingview()['EUR_USD']
                    calculate_indexes(deal_type='RK', partner_flag=partner_flag, eur_rate=eur_rate)
                else:
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'RUB=>EUR', 'EUR=>RUB', 'EUR', data['SUM_EUR_RE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['RUB_EURO_RATE'], '*',
                            'RUB', data['BANK_RE'], '', username, data['REF_CODE_RE'], data.get('CITY_RE'), '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', '', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'RUB=>EUR', 'RUB=>USDT', 'RUB', '', data['BANK_RE'], '', data['RUB_INFO']['p2p_rub_usdt'],
                            '/', 'USDT', 'Binance', '', '', '', '', '', '', '', '', '', '',
                            '', '–ü–ª–∞–Ω', '', '', '', '', '', '', '')  # –∫—É—Ä—Å rub usdt #–¥–æ–±–∞–≤–∏—Ç—å Binance, –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞(–æ–≤) + –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'RUB=>EUR', 'USDT=>EUR', 'USDT', '', 'Binance',
                            '', data['RUB_INFO']['usdt_euro_rate'], '*', 'EUR', '–ù–∞–ª–∏—á–Ω—ã–µ', '', '', '', '', 'VPR', '', '', '', '', '',
                            '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', '', 'VPR in 3', '', '', '')  # –¥–æ–±–∞–≤–∏—Ç—å Binance, –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞(–æ–≤) + –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                    calculate_indexes(deal_type='RE', partner_flag=partner_flag, eur_rate='')
                #update_contact(username=username, city=CITY_RE, acc_type_from=BANK_RE, curr_from='RUB')
                add_border()
            # –ù–µ—Ç
            elif message.text == _('–ù–µ—Ç') and data.get('FORM_ORDER_FLAG') and data.get('OPER_FLAG_EUR_RUB') and (not data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('BANK_FLAG') and data.get('SUM_RUB_FLAG') and data.get('ORDER_CONFIRM_RE_FLAG'):
                data['PENDING_ORDER_FLAG'] = True
                DOCS_FLAG = False
                a = types.ReplyKeyboardRemove()
                mess = _('<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä!</b>\n' \
                        '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton(_('–°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä'))
                b2 = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                markup.add(b1, b2)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä (–æ—Ç–∫–∞–∑)
            elif message.text == _('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') and data.get('FORM_ORDER_FLAG') and data.get('OPER_FLAG_EUR_RUB') and (not data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('BANK_FLAG') and data.get('SUM_RUB_FLAG') and data.get('ORDER_CONFIRM_RE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                data['PENDING_ORDER_FLAG'] = False
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, text=_('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é'), parse_mode='html',
                                reply_markup=markup)
            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
            elif message.text == _('–°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä') and data.get('FORM_ORDER_FLAG') and data.get('OPER_FLAG_EUR_RUB') and (
                    not data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('BANK_FLAG') and data.get('SUM_RUB_FLAG') and data.get('ORDER_CONFIRM_RE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                a = types.ReplyKeyboardRemove()
                mess = _('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–µ–ª–∞–µ–º—ã–π –∫—É—Ä—Å —Å–¥–µ–ª–∫–∏.')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            # –í–≤–æ–¥ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫—É—Ä—Å–∞
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            elif not message.text.replace(".", "").replace(",", "").isnumeric() and data.get('FORM_ORDER_FLAG') and data.get('OPER_FLAG_EUR_RUB') and (
                    not data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('BANK_FLAG') and data.get('SUM_RUB_FLAG') and data.get('ORDER_CONFIRM_RE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                a = types.ReplyKeyboardRemove()
                mess = _(
                    '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫—É—Ä—Å, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                    '<b><em>–í–≤–æ–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±—É–∫–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è</em></b>.\n' \
                    '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            # –ö—É—Ä—Å –≤–≤–µ–¥–µ–Ω
            elif message.text.replace(".", "").replace(",", "").isnumeric() and data.get('FORM_ORDER_FLAG') and data.get('OPER_FLAG_EUR_RUB') and (
                    not data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('BANK_FLAG') and data.get('SUM_RUB_FLAG') and data.get('ORDER_CONFIRM_RE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                data['PENDING_ORDER_FLAG'] = False
                a = types.ReplyKeyboardRemove()
                client_mess = _('–í–∞—à –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω. –ú—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!')
                from_id = message.from_user.id
                first_name = message.from_user.first_name
                username = '@' + message.chat.username if message.chat.username is not None else '-'
                date = datetime.now(tz).strftime('%d.%m.%Y')
                # date = datetime.utcfromtimestamp(message.json['date']).strftime('%Y-%m-%d %H:%M:%S')
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                dealer = ACTIVE_CONTACT_LIST[username]['ContactDealer']
                deal_type = 'RUB=>EUR' if data.get('OPER_NAME_RE') ==_('–û–±–º–µ–Ω –†–£–ë–õ–ï–ô –Ω–∞ –ï–í–†–û') else 'EUR=>RUB'
                write_pending_order(createDateTime=date, dealer=dealer, dealType=deal_type, exchFROM_Amount=data['SUM_EUR_RE'],
                                    orderRate=message.text.replace(".", ","), user_ID=message.from_user.id,
                                    tg_Contact=username, city=data.get('CITY_RE'), currStatus='–°–æ–∑–¥–∞–Ω', chat_ID=message.chat.id, )
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, client_mess, parse_mode='html', reply_markup=markup)
            ###2.2.1 –û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û
            elif (message.text == _('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û') or message.text == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') or message.text == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´') or message.text == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï')) and data.get('FORM_ORDER_FLAG'):
                data['OPER_NAME_UE'] = str(message.text)
                data['OPER_FLAG_EUR_RUB'] = False
                data['OPER_FLAG_USDT_EURO'] = True
                if message.text == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'):
                    data['OPER_FLAG_USDT_EURO_BACK'] = True
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                    b1 = types.KeyboardButton(_('–°–±–µ—Ä–±–∞–Ω–∫'))
                    b2 = types.KeyboardButton(_('–¢–∏–Ω—å–∫–æ—Ñ—Ñ'))
                    b3 = types.KeyboardButton(_('–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω'))
                    b4 = types.KeyboardButton(_('–ü—Ä–æ—á–∏–µ'))
                    b5 = types.KeyboardButton(_('–ù–∞–ª–∏—á–Ω—ã–µ'))
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞ —Å—á–µ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä—É–±–ª–∏:\n' \
                        '1. –°–±–µ—Ä–±–∞–Ω–∫\n' \
                        '2. –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n' \
                        '3. –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω\n' \
                        '4. –ù–∞–ª–∏—á–Ω—ã–µ\n'
                        '5. –ü—Ä–æ—á–∏–µ\n')
                    markup.add(b1, b2, b3, b4, b5, mb)
                elif message.text == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞ —Å—á–µ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∏–≤–Ω—ã:\n' \
                        '1. Monobank\n' \
                        '2. PUMB\n' \
                        '3. –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫\n' \
                        '4. A-–ë–∞–Ω–∫\n'
                        '5. Izibank\n')
                    markup.add(*ua_bank_names, mb)
                elif message.text == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞ —Å—á–µ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–Ω–≥–µ:\n' \
                        '1. Kaspi Bank\n' \
                        '2. Halyk Bank\n' \
                        '3. –¶–µ–Ω—Ç—Ä–ö—Ä–µ–¥–∏—Ç –ë–∞–Ω–∫\n' \
                        '4. Jysan Bank\n'
                        '5. Forte Bank\n'
                        '6. Altyn Bank\n'
                        '7. Freedom Bank\n')
                    markup.add(*kzt_bank_names, mb)
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    order_city_buttons = form_order_city_buttons(_(CITY_BUTTONS))
                    markup.add(*order_city_buttons, mb)
                    mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # 2.2.2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
            elif (message.text == _('–î—Ä—É–≥–∞—è –ª–æ–∫–∞—Ü–∏—è')) and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) and (
                    data.get('OPER_FLAG_USDT_EURO')) \
                    and (not data.get('CITY_UE_FLAG')) and (not data.get('ANOTHER_CITY_UE_FLAG')) and not data.get('CASH_FLAG'):
                data['ANOTHER_CITY_UE_FLAG'] = True
                mess = _('<b><em>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏</em></b>')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons, mb)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif (message.text == _('–ù–∞–ª–∏—á–Ω—ã–µ')) and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) and (
                    data.get('OPER_FLAG_USDT_EURO')) and (not data.get('CITY_UE_FLAG')) and (not data.get('ANOTHER_CITY_UE_FLAG')):
                data['CASH_FLAG'] = True
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton(_('–ú–æ—Å–∫–≤–∞'))
                b2 = types.KeyboardButton(_('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'))
                b3 = types.KeyboardButton(_('–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è'))
                markup.add(b1, b2, b3, mb)
                mess = _('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # 2.2.3 –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ –µ–≤—Ä–æ
            # –ó–¥–µ—Å—å –≤ CITY_UE –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ usdt=>rub –∏–ª–∏ usdt=>uah
            elif ((message.text in [_('–ú–æ—Å–∫–≤–∞'), _('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'), _('–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è')] and data.get('CASH_FLAG')) or message.text in cities or message.text in ru_bank_names or message.text in ua_bank_names or message.text in kzt_bank_names or data.get('ANOTHER_CITY_UE_FLAG') or data.get('CASH_FLAG')) and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) \
                    and (data.get('OPER_FLAG_USDT_EURO')) and (not data.get('CITY_UE_FLAG')):
                a = types.ReplyKeyboardRemove()
                data['CITY_UE_FLAG'] = True
                if message.text in [_('–ú–æ—Å–∫–≤–∞'), _('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'), _('–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è')]:
                    data['CITY_UE'] = '–ù–∞–ª–∏—á–Ω—ã–µ'
                    data['CASH_CITY'] = message.text
                else:
                    data['CITY_UE'] = message.text
                    data['CASH_CITY'] = ''
                if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'):
                    mess = _('<b>–ö–∞–∫—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>\n<em>(–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤)</em>\n\n'\
                             '<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É 10000 —Ä—É–±–ª–µ–π</b>')
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    mess = _('<b>–ö–∞–∫—É—é —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>\n<em>(–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤)</em>\n\n'\
                             '<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É 4000 –≥—Ä–∏–≤–µ–Ω</b>')   
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    mess = _('<b>–ö–∞–∫—É—é —Å—É–º–º—É –≤ —Ç–µ–Ω–≥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>\n<em>(–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤)</em>\n\n'\
                             '<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–±–º–µ–Ω—É 50000 —Ç–µ–Ω–≥–µ</b>')   
                else:
                    currency = '–µ–≤—Ä–æ'
                    currency2 = '–ï–í–†–û'
                    lim1 = '100'
                    lim2 = '500'
                    mess = _(
                        '<b>–ö–∞–∫—É—é —Å—É–º–º—É –≤ {currency} —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?</b>\n<em>(–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤)</em>\n\n' \
                        '<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ –≥–æ—Ä–æ–¥–∞:</b>\n' \
                        '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏, –ë–∞—Ä, –ë—É–¥–≤–∞, –¢–∏–≤–∞—Ç - {lim1} {currency2}\n' \
                        '–û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ - {lim2} {currency2}').format(currency=currency,
                                                                        currency2=currency2,
                                                                        lim1=lim1,
                                                                        lim2=lim2)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons, mb)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)  # –¥–ª—è —Ç–µ—Å—Ç–∞
            # 2.2.4 –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏
            # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —Å—É–º–º—É –Ω–µ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 500 –µ–≤—Ä–æ
            elif ((not message.text.isdigit() or len(message.text) > 8) \
                or ((int(message.text) < 100 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û') or int(message.text) < 10000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') or int(message.text) < 4000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´') or int(message.text) < 50000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï')) and (data.get('CITY_UE') in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')] or data.get('CITY_UE') in ru_bank_names or data.get('CITY_UE') in ua_bank_names or data.get('CITY_UE') in kzt_bank_names)) \
                or ((int(message.text) < 500 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û') or int(message.text) < 50000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò')) and data.get('CITY_UE') not in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')] and data.get('CITY_UE') not in ru_bank_names and data.get('CITY_UE') not in ua_bank_names and data.get('CITY_UE') not in kzt_bank_names)) \
                    and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and (data.get('CITY_UE_FLAG')) and (not data.get('SUM_USDT_FLAG')):
                a = types.ReplyKeyboardRemove()
                if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'):
                    mess = _('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                            '<b><em>1.–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤</em></b>.\n' \
                            '<b><em>2.–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ 10000 —Ä—É–±–ª–µ–π</em></b>')
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    mess = _('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                            '<b><em>1.–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤</em></b>.\n' \
                            '<b><em>2.–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ 4000 –≥—Ä–∏–≤–µ–Ω</em></b>')
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    mess = _('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                            '<b><em>1.–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤</em></b>.\n' \
                            '<b><em>2.–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ 50000 —Ç–µ–Ω–≥–µ</em></b>')
                else:
                    currency = '–µ–≤—Ä–æ'
                    currency2 = '–ï–í–†–û'
                    lim1 = '100'
                    lim2 = '500'
                    mess = _(
                        '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                        '<b><em>1.–¶–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 –∑–Ω–∞–∫–æ–≤</em></b>.\n' \
                        '<b><em>2.–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ –•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏, –ë–∞—Ä–µ, –¢–∏–≤–∞—Ç–µ –∏ –ë—É–¥–≤–µ - {lim1} {currency2}, –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö - {lim2} {currency2}</em></b>.\n\n' \
                        '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>').format(
                        lim1=lim1,
                        lim2=lim2,
                        currency2=currency2)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons, mb)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –∫–æ—à–µ–ª—å–∫–∞
            elif ((message.text.isdigit() and len(message.text) <= 8) \
            and (((int(message.text) >= 100 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û')) or (int(message.text) >= 10000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò')) or (int(message.text) >= 4000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´') or (int(message.text) >= 50000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'))) and (CITY_UE in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')] or CITY_UE in ru_bank_names or CITY_UE in ua_bank_names or CITY_UE in kzt_bank_names)) \
            or ((int(message.text) >= 500 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û')) or (int(message.text) >= 50000 and data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò')) and CITY_UE not in [_('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏'), _('–ë–∞—Ä'), _('–ë—É–¥–≤–∞'), _('–¢–∏–≤–∞—Ç')]))) \
                and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                and (data.get('CITY_UE_FLAG')) and (not data.get('SUM_USDT_FLAG')) and (not data.get('ORDER_CONFIRM_UE_FLAG')) and not data.get('CHOOSE_BLOCKCHAIN') and not data.get('CHECK_ADDRESS'):
                data['CHOOSE_BLOCKCHAIN'] = True
                data['SUM_USDT_FLAG'] = True
                # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
                data['SUM_EUR_UE'] = int(message.text)
                b1 = types.KeyboardButton(_('Tronchain'))
                b2 = types.KeyboardButton(_('Etherium'))
                b3 = types.KeyboardButton(_('Binance/BybitChain'))
                b4 = types.KeyboardButton(_('Binance/BybitID'))
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(b1, b2, b3, b4, mb)
                mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫—á–µ–π–Ω, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å USDT')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            elif (message.text in ['Tronchain']) \
                    and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (not data.get('ORDER_CONFIRM_UE_FLAG')) and data.get('CHOOSE_BLOCKCHAIN') and not data.get('CHECK_ADDRESS'):
                data['BLOCKCHAIN'] = message.text
                data['CHECK_ADDRESS'] = True
                markup = types.ReplyKeyboardRemove()
                mess = _('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞')  # –í—Ä–µ–º—è –ø–æ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏–∏
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif (message.text[0] != 'T' or len(message.text) < 32) and message.text not in ['Etherium', 'Binance/BybitChain',
                                                                                             'Binance/BybitID'] and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (not data.get('ORDER_TIME_FLAG_UE')) and (not data.get('ORDER_CONFIRM_UE_FLAG')) and data.get('CHECK_ADDRESS') and data.get('CHOOSE_BLOCKCHAIN'):
                mess = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                # –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å—á–µ—Ç—É –∫—É—Ä—Å–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏
            elif (message.text[0] == 'T' and len(message.text) > 32 or message.text in ['Etherium', 'Binance/BybitChain',
                                                                                        'Binance/BybitID']) and (data.get('FORM_ORDER_FLAG')) and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (not data.get('ORDER_TIME_FLAG_UE')) and (not data.get('ORDER_CONFIRM_UE_FLAG')) and (data.get('CHECK_ADDRESS') and data.get('CHOOSE_BLOCKCHAIN') or message.text in ['Etherium', 'Binance/BybitChain', 'Binance/BybitID']):
                data['ORDER_TIME_FLAG_UE'] = True
                if message.text in ['Etherium', 'Binance/BybitChain', 'Binance/BybitID']:
                    data['BLOCKCHAIN'] = message.text
                    data['CHECK_ADDRESS'] = True
                    data['ADDRESS'] = '–ù–µ –≤–≤–µ–¥–µ–Ω'
                else:
                    mess = '<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... \n–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥ </em>'
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                    data['ADDRESS'] = message.text
                username = '@' + message.chat.username if message.chat.username is not None else message.chat.id
                # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
                if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'):
                    usdt_info = rates_funcs.compute_usdt_rub_amount(data['SUM_EUR_UE'], username, data.get('CASH_FLAG'), data['CITY_UE']) #–∑–¥–µ—Å—å –≤ sum_eur_ue —Ä—É–±–ª–∏
                    data['SUM_USDT_UE'] = usdt_info['usdt_amount']
                    data['USDT_EURO_RATE'] = usdt_info['high_rate'] if data['SUM_EUR_UE']>499999 else usdt_info['low_rate'] # –∑–¥–µ—Å—å –∑–∞–ø–∏—Å–∞–Ω–∞ –ø–∞—Ä–∞ USDT_RUB_RATE (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
                    data['USDT_EURO_RATE'] = data['USDT_EURO_RATE'] #if CITY_UE != _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏') else data['USDT_EURO_RATE'] - 0.005
                    data['SUM_USDT_UE'] = math.ceil(data['SUM_EUR_UE'] / data['USDT_EURO_RATE']) # –ó–¥–µ—Å—å —Å—É–º–º–∞ —Ä—É–±–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç
                    data['USDT_EURO_RATE_GS'] = usdt_info['usdt_rub_rate_bybit']  # –±–µ–∑ —É—á–µ—Ç–∞ –Ω–æ—Ä–º—ã —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    usdt_info = rates_funcs.compute_usdt_uah_amount(data['SUM_EUR_UE'], username, data['CITY_UE']) #–∑–¥–µ—Å—å –≤ sum_eur_ue –≥—Ä–∏–≤–Ω—ã
                    data['SUM_USDT_UE'] = usdt_info['usdt_amount']
                    data['USDT_EURO_RATE'] = usdt_info['high_rate'] if data['SUM_EUR_UE']>200000 else usdt_info['low_rate'] # –∑–¥–µ—Å—å –∑–∞–ø–∏—Å–∞–Ω–∞ –ø–∞—Ä–∞ USDT_RUB_RATE (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
                    data['USDT_EURO_RATE'] = data['USDT_EURO_RATE'] #if CITY_UE != _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏') else data['USDT_EURO_RATE'] - 0.005
                    data['SUM_USDT_UE'] = math.ceil(data['SUM_EUR_UE'] / data['USDT_EURO_RATE']) # –ó–¥–µ—Å—å —Å—É–º–º–∞ —Ä—É–±–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç
                    data['USDT_EURO_RATE_GS'] = usdt_info['usdt_uah_rate_bybit']  # –±–µ–∑ —É—á–µ—Ç–∞ –Ω–æ—Ä–º—ã —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    usdt_info = rates_funcs.compute_usdt_kzt_amount(data['SUM_EUR_UE'], username, data['CITY_UE']) #–∑–¥–µ—Å—å –≤ sum_eur_ue —Ç–µ–Ω–≥–µ
                    data['SUM_USDT_UE'] = usdt_info['usdt_amount']
                    data['USDT_EURO_RATE'] = usdt_info['high_rate'] if data['SUM_EUR_UE']>250000 else usdt_info['low_rate'] # –∑–¥–µ—Å—å –∑–∞–ø–∏—Å–∞–Ω–∞ –ø–∞—Ä–∞ USDT_RUB_RATE (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
                    data['USDT_EURO_RATE'] = data['USDT_EURO_RATE'] #if CITY_UE != _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏') else data['USDT_EURO_RATE'] - 0.005
                    data['SUM_USDT_UE'] = math.ceil(data['SUM_EUR_UE'] * data['USDT_EURO_RATE']) # –ó–¥–µ—Å—å —Å—É–º–º–∞ —Ä—É–±–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç –∫–ª–∏–µ–Ω—Ç
                    data['USDT_EURO_RATE_GS'] = usdt_info['usdt_kzt_rate_bybit']  # –±–µ–∑ —É—á–µ—Ç–∞ –Ω–æ—Ä–º—ã —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                else:
                    usdt_info = rates_funcs.compute_usdt_euro_amount(data['SUM_EUR_UE'], username)
                    data['SUM_USDT_UE'] = usdt_info['usdt_amount']
                    data['USDT_EURO_RATE'] = usdt_info['high_rate'] if data['SUM_EUR_UE']>4999 else usdt_info['low_rate']
                    data['USDT_EURO_RATE'] = data['USDT_EURO_RATE'] #if CITY_UE != _('–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏') else data['USDT_EURO_RATE'] - 0.005
                    data['SUM_USDT_UE'] = math.ceil(data['SUM_EUR_UE'] / data['USDT_EURO_RATE'])
                    data['USDT_EURO_RATE_GS'] = usdt_info['usdt_eur_rate_gs']  # –±–µ–∑ —É—á–µ—Ç–∞ –Ω–æ—Ä–º—ã —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                if data.get('BLOCKCHAIN') == 'Tronchain':
                    try:
                        all_data_trc10 = get_trc_data('TRC-10', data['ADDRESS'])
                        all_data_trc20 = get_trc_data('TRC-20', data['ADDRESS'])
                        data['RISK_TRC'] = check_risk_trc(all_data_trc10, all_data_trc20)
                        if data['RISK_TRC']:
                            data['RISK_TRC'] = '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
                        else:
                            data['RISK_TRC'] = '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'
                    except Exception as e:
                        print('Exception: ' + str(e))
                        data['RISK_TRC'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å'
                else:
                    data['RISK_TRC'] = '–ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏'
                msk_current_time = datetime.now(tz)
                msk_minutes = msk_current_time.hour * 60 + msk_current_time.minute
                # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞: –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –º–∏–Ω—É—Ç—ã
                time_borders = {
                    0 * 60: '00:00 - 02:00',
                    2 * 60: '02:00 - 04:00',
                    4 * 60: '04:00 - 06:00',
                    6 * 60: '06:00 - 08:00',
                    8 * 60: '08:00 - 10:00',
                    10 * 60: '10:00 - 12:00',
                    12 * 60: '12:00 - 14:00',
                    14 * 60: '14:00 - 16:00',
                    16 * 60: '16:00 - 18:00',
                    18 * 60: '18:00 - 20:00',
                    20 * 60: '20:00 - 22:00'
                }
                time_buttons = [types.KeyboardButton(time_period) for high_board, time_period in time_borders.items() if
                                msk_minutes < high_board]
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                markup.add(*time_buttons)
                markup.add(types.KeyboardButton(_('–î—Ä—É–≥–æ–π –¥–µ–Ω—å')), mb)
                mess = _('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –í–∞–º –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–¥–µ–ª–∫—É')  # –í—Ä–µ–º—è –ø–æ –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏–∏
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
                # 2.1.7. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
            elif (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_USDT_EURO')) and (not data.get('OPER_FLAG_EUR_RUB')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (data.get('ORDER_TIME_FLAG_UE')) and (not data.get('FRIEND_REF_FLAG_UE')) and (
                    not data.get('ORDER_CONFIRM_UE_FLAG')):
                data['FRIEND_REF_FLAG_UE'] = True
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
                data['ORDER_TIME_UE'] = message.text
                if (username not in ACTIVE_CONTACT_LIST) and (user_id not in all_user_ids):
                    existed_disc_codes = [one_doc['Discount_Number'] for one_doc in ACTIVE_CONTACT_LIST.values()]
                    existed_ref_codes = [one_doc['Referral_Number'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Referral_Number' in one_doc]
                    while True:
                        s = string.ascii_lowercase + string.ascii_uppercase + string.digits
                        disc_code = ''.join(random.sample(s, 4))
                        ref_code = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
                        if disc_code not in existed_disc_codes and ref_code not in existed_ref_codes:
                            break
                    discount = '0%'
                    referal_mess = _('–í—ã –≤–ø–µ—Ä–≤—ã–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É.\n' \
                                    '–í–∞—à –∫–æ–¥ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{disc_code}</em></b>\n' \
                                    '–í–∞—à –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{ref_code}</em></b>\n' \
                                    '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: {discount}\n\n' \
                                    '<b>–ü—Ä–æ—Å—å–±–∞ –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:\n' \
                                    '1. –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥\n' \
                                    '2. –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥—Ä—É–≥–∞</b>').format(disc_code=disc_code,
                                                                        ref_code=ref_code,
                                                                        discount=discount)
                    write_contact(TG_Contact=username, user_ID=message.from_user.id, NameSurname=message.from_user.full_name,
                                AccTypeFROM='', CurrFROM='USDT',
                                City=data['CITY_UE'], ContactType='–ö–ª–∏–µ–Ω—Ç', ContactDealer='Alpha_TG_Bot', CurrStatus='–ê–∫—Ç–∏–≤–Ω—ã–π',
                                Discount_Number=disc_code, Referral_Number=ref_code)
                else:
                    if username in ACTIVE_CONTACT_LIST:
                        disc_code = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                        ref_code = ACTIVE_CONTACT_LIST[username]['Referral_Number']
                        discount = str(float(ACTIVE_CONTACT_LIST[username]['Discount'].replace(',','.'))*100) + '%'
                    else:
                        userids_names = {user_info['user_ID']: username for username, user_info in ACTIVE_CONTACT_LIST.items()}
                        disc_code = ACTIVE_CONTACT_LIST[userids_names[user_id]]['Discount_Number']
                        ref_code = ACTIVE_CONTACT_LIST[username]['Referral_Number']
                        discount = str(float(ACTIVE_CONTACT_LIST[username]['Discount'].replace(',','.'))*100) + '%'
                    referal_mess = _('–í–∞—à –∫–æ–¥ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{disc_code}</em></b>\n' \
                                    '–í–∞—à –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: <b><em>{ref_code}</em></b>\n' \
                                    '–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: <b><em>{discount}</em></b>\n\n' \
                                    '<b>–ü—Ä–æ—Å—å–±–∞ –≤—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:\n' \
                                    '1. –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥\n' \
                                    '2. –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥—Ä—É–≥–∞</b>').format(disc_code=disc_code,
                                                                    ref_code=ref_code,
                                                                    discount=discount)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥'))
                b2 = types.KeyboardButton(_('–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥—Ä—É–≥–∞'))
                b3 = types.KeyboardButton(_('–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞'))
                markup.add(b1, b2, b3, mb) if ACTIVE_CONTACT_LIST[username]['ContactType'] in ['–ö—É—Ä–∞—Ç–æ—Ä', '–ü–∞—Ä—Ç–Ω–µ—Ä'] else markup.add(b1, b2, mb)
                bot.send_message(message.chat.id, referal_mess, parse_mode='html', reply_markup=markup)
            # 2.1.8.2 –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥—Ä—É–≥–∞
            elif message.text == _('–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥—Ä—É–≥–∞') and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_USDT_EURO')) and (
                    not data.get('OPER_FLAG_EUR_RUB')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (data.get('ORDER_TIME_FLAG_UE')) and (data.get('FRIEND_REF_FLAG_UE')) and (
                    not data.get('ORDER_CONFIRM_UE_FLAG')):
                a = types.ReplyKeyboardRemove()
                mess = _(
                    '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π <em>(4 —Å–∏–º–≤–æ–ª–∞)</em> –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π <em>(6 —Å–∏–º–≤–æ–ª–æ–≤)</em> –ø—Ä–æ–≥—Ä–∞–º–º—ã –í–∞—à–µ–≥–æ –¥—Ä—É–≥–∞</b>')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            elif (message.text == _('–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥') and data.get('FRIEND_REF_FLAG_UE')) or (data.get('FORM_ORDER_FLAG')) and not data.get('FIND_USER_FLAG') and message.text != _('–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞') and (
                    data.get('OPER_FLAG_USDT_EURO')) and \
                    (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (data.get('ORDER_TIME_FLAG_UE')) and (
                    data.get('FRIEND_REF_FLAG_UE')) and \
                    (not data.get('RES_ORDER_FLAG_UE')) and (not data.get('ORDER_CONFIRM_UE_FLAG')):
                a = types.ReplyKeyboardRemove()
                data['RES_ORDER_FLAG_UE'] = True
                data['ORDER_CONFIRM_UE_FLAG'] = True
                #ACTIVE_CONTACT_LIST = scrab_contact_list()  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ —Å—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –º—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                username = '@' + message.chat.username if message.chat.username is not None else 'None'
                user_id = message.from_user.id
                all_user_ids = [user_info['user_ID'] for user_info in ACTIVE_CONTACT_LIST.values()]
                disc_values = {one_doc['Discount_Number']: one_doc['Discount'] for one_doc in ACTIVE_CONTACT_LIST.values() if
                            'Discount' in one_doc}
                disc_nicks = {one_doc['Discount_Number']: nick for nick, one_doc in ACTIVE_CONTACT_LIST.items() if 'Discount_Number' in one_doc}
                disc_ids = {one_doc['Discount_Number']: one_doc['user_ID'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Discount_Number' in one_doc}
                refs_nicks = {one_doc['Referral_Number']: nick for nick, one_doc in ACTIVE_CONTACT_LIST.items() if 'Referral_Number' in one_doc}
                refs_ids = {one_doc['Referral_Number']: one_doc['user_ID'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Referral_Number' in one_doc}
                if message.text == _('–û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–¥'):
                    data['REF_CODE_UE'] = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                else:
                    data['REF_CODE_UE'] = message.text
                if len(data.get('REF_CODE_UE')) == 4 and data.get('REF_CODE_UE').strip() in disc_values:
                    data['DISCOUNT_UE'] = disc_values[data['REF_CODE_UE']]
                    disc_status_mess = _('–î–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥ <b><em>{REF_CODE_UE}</em></b> –Ω–∞–π–¥–µ–Ω.\n' \
                                        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{user_nick} (ID: {user_id})\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em></b>').format(
                        REF_CODE_UE=data['REF_CODE_UE'],
                        user_nick=disc_nicks[data['REF_CODE_UE']],
                        user_id=disc_ids[data['REF_CODE_UE']])
                elif len(data.get('REF_CODE_UE')) == 6 and data.get('REF_CODE_UE').strip() in refs_nicks and data.get('REF_CODE_UE') != ACTIVE_CONTACT_LIST[username]['Referral_Number']:
                    data['DISCOUNT_UE'] = ACTIVE_CONTACT_LIST[username]['Discount']
                    disc_status_mess = _('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ <b><em>{REF_CODE_UE}</em></b> –Ω–∞–π–¥–µ–Ω.\n' \
                                        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{user_nick} (ID: {user_id})</em></b>\n\n' \
                                        '<em>–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –í–∞–º —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏!\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em>').format(
                        REF_CODE_UE=data['REF_CODE_UE'],
                        user_nick=refs_nicks[data['REF_CODE_UE']],
                        user_id=refs_ids[data['REF_CODE_UE']])
                elif data.get('REF_CODE_UE') == ACTIVE_CONTACT_LIST[username]['Referral_Number']:
                    data['DISCOUNT_UE'] = ACTIVE_CONTACT_LIST[username]["Discount"]
                    disc_status_mess = _('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ <b><em>{REF_CODE_UE}</em></b> –≤ —Å–≤–æ–∏—Ö —Å–¥–µ–ª–∫–∞—Ö.\n' \
                                        '–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –í–∞—à –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥ <b>{disc_code}</b>,' \
                                        ' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–∫–∏–¥–∫—É <b>{disc}%.</b>\n\n' \
                                        '<em>–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –í–∞–º —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏!\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em>').format(
                        REF_CODE_UE=data['REF_CODE_UE'],
                        disc_code=ACTIVE_CONTACT_LIST[username]["Discount_Number"],
                        disc=str(float(ACTIVE_CONTACT_LIST[username]["Discount"].replace(',','.'))*100))
                    data['REF_CODE_UE'] = ACTIVE_CONTACT_LIST[username]["Discount_Number"]
                else:
                    data['DISCOUNT_UE'] = ACTIVE_CONTACT_LIST[username]["Discount"]
                    disc_status_mess = _('–ö–æ–¥ <b><em>{REF_CODE_UE}</em></b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n' \
                                        '–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –í–∞—à –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥ <b>{disc_code}</b>,' \
                                        ' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–∫–∏–¥–∫—É <b>{disc}%.</b>\n\n' \
                                        '<em>–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –í–∞–º —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π —Å–∫–∏–¥–∫–∏!\n\n' \
                                        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em>').format(
                        REF_CODE_UE=data['REF_CODE_UE'],
                        disc_code=ACTIVE_CONTACT_LIST[username]["Discount_Number"],
                        disc=str(float(ACTIVE_CONTACT_LIST[username]["Discount"].replace(',','.'))*100))
                    data['REF_CODE_UE'] = ACTIVE_CONTACT_LIST[username]["Discount_Number"]
                if data.get('OPER_NAME_RE') in ['–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û', '–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò', '–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´', '–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï']:
                    discount = 1 + float(data['DISCOUNT_UE'].replace(',', '.')) / 100
                else:
                    discount = 1 - float(data['DISCOUNT_UE'].replace(',', '.')) / 100
                data['USDT_EURO_RATE'] = round(data['USDT_EURO_RATE'] * discount, 4)
                data['SUM_USDT_UE'] = math.ceil(data['SUM_EUR_UE'] / data['USDT_EURO_RATE'])
                if data.get('BLOCKCHAIN') == 'Tronchain' and data['RISK_TRC'] == '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏':
                    data['SUM_USDT_UE'] +=5 
                elif data.get('BLOCKCHAIN') == 'Etherium':
                    data['SUM_USDT_UE'] +=10 
                if data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'):
                    currency = '–µ–≤—Ä–æ' 
                    currency1 = 'EUR' 
                elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    currency = '–≥—Ä–∏–≤–Ω–∞—Ö'
                    currency1 = 'UAH'
                elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    currency = '—Ç–µ–Ω–≥–µ'
                    currency1 = 'KZT' 
                else:
                    currency = '—Ä—É–±–ª—è—Ö'
                    currency1 = 'RUB'
                city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è') if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï') else _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                if data.get('CASH_FLAG'):
                    client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_UE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (USDT/{currency1}):</em> {USDT_EURO_RATE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency}:</em> {SUM_EUR_UE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ USDT:</em> {SUM_USDT_UE}\n' \
                                        '<em>{city_or_bank}:</em> {CITY_UE}\n' \
                                        '<em>–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {CASH_CITY}\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_UE}\n\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(OPER_NAME_UE=data.get('OPER_NAME_UE'),
                                                                                                        USDT_EURO_RATE=data['USDT_EURO_RATE'],
                                                                                                        SUM_EUR_UE=data['SUM_EUR_UE'],
                                                                                                        SUM_USDT_UE=data['SUM_USDT_UE'],
                                                                                                        CITY_UE=data['CITY_UE'],
                                                                                                        ORDER_TIME_UE=data['ORDER_TIME_UE'],
                                                                                                        currency=currency,
                                                                                                        CASH_CITY=data['CASH_CITY'],
                                                                                                        city_or_bank=city_or_bank,
                                                                                                        currency1=currency1)
                else:
                    client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_UE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (USDT/{currency1}):</em> {USDT_EURO_RATE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency}:</em> {SUM_EUR_UE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ USDT:</em> {SUM_USDT_UE}\n' \
                                        '<em>{city_or_bank}:</em> {CITY_UE}\n\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_UE}\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(OPER_NAME_UE=data.get('OPER_NAME_UE'),
                                                                                                        USDT_EURO_RATE=data['USDT_EURO_RATE'],
                                                                                                        SUM_EUR_UE=data['SUM_EUR_UE'],
                                                                                                        SUM_USDT_UE=data['SUM_USDT_UE'],
                                                                                                        CITY_UE=data['CITY_UE'],
                                                                                                        ORDER_TIME_UE=data['ORDER_TIME_UE'],
                                                                                                        currency=currency,
                                                                                                        city_or_bank=city_or_bank,
                                                                                                       currency1=currency1)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–î–∞'))
                b2 = types.KeyboardButton(_('–ù–µ—Ç'))
                markup.add(b1, b2)
                client_warning_mess = _(
                    '<b>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –∑–∞—è–≤–∫—É, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π' \
                    ' –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <em>/documents</em></b>\n\n')
                bot.send_message(message.chat.id, disc_status_mess, parse_mode='html', reply_markup=a)
                bot.send_message(message.chat.id, client_order_mess, parse_mode='html', reply_markup=a)
                bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
            # 2.1.8.3 –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ 
            elif message.text == _('–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞') and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_USDT_EURO')) and (
                    not data.get('OPER_FLAG_EUR_RUB')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (data.get('ORDER_TIME_FLAG_UE')) and (data.get('FRIEND_REF_FLAG_UE')) and (
                    not data.get('ORDER_CONFIRM_UE_FLAG')):
                data['FIND_USER_FLAG'] = True
                mess = _('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞, –Ω–∞—á–∏–Ω–∞—è —Å "@"')
                markup = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            elif data.get('FIND_USER_FLAG') and message.text in ACTIVE_CONTACT_LIST and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_USDT_EURO')) and (
                    not data.get('OPER_FLAG_EUR_RUB')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (data.get('ORDER_TIME_FLAG_UE')) and (data.get('FRIEND_REF_FLAG_UE')) and (
                    not data.get('ORDER_CONFIRM_UE_FLAG')):
                data['RES_ORDER_FLAG_UE'] = True
                data['ORDER_CONFIRM_UE_FLAG'] = True
                add_username = message.text
                disc_code = ACTIVE_CONTACT_LIST[message.text]["Discount_Number"]
                disc_status_mess = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.\n' \
                                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{user_nick} (–¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥: {disc_code})\n\n' \
                                    '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /refferal</em></b>').format(
                    user_nick=message.text,
                    disc_code=disc_code)
                if data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'):
                    currency = '–µ–≤—Ä–æ' 
                    currency1 = 'EUR' 
                elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    currency = '–≥—Ä–∏–≤–Ω–∞—Ö'
                    currency1 = 'UAH' 
                elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    currency = '—Ç–µ–Ω–≥–µ'
                    currency1 = 'KZT' 
                else:
                    currency = '—Ä—É–±–ª—è—Ö'
                    currency1 = 'RUB'
                city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è') if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï') else _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                if data.get('CASH_FLAG'):
                    client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_UE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (USDT/{currency1}):</em> {USDT_EURO_RATE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency}:</em> {SUM_EUR_UE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ USDT:</em> {SUM_USDT_UE}\n' \
                                        '<em>{city_or_bank}:</em> {CITY_UE}\n' \
                                        '<em>–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {CASH_CITY}\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_UE}\n\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(OPER_NAME_UE=data.get('OPER_NAME_UE'),
                                                                                                        USDT_EURO_RATE=data['USDT_EURO_RATE'],
                                                                                                        SUM_EUR_UE=data['SUM_EUR_UE'],
                                                                                                        SUM_USDT_UE=data['SUM_USDT_UE'],
                                                                                                        CITY_UE=data['CITY_UE'],
                                                                                                        ORDER_TIME_UE=data['ORDER_TIME_UE'],
                                                                                                        currency=currency,
                                                                                                        CASH_CITY=data['CASH_CITY'],
                                                                                                        city_or_bank=city_or_bank,
                                                                                                        currency1=currency1)
                else:
                    client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                        '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_UE}\n' \
                                        '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (USDT/{currency1}):</em> {USDT_EURO_RATE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency}:</em> {SUM_EUR_UE}\n' \
                                        '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ USDT:</em> {SUM_USDT_UE}\n' \
                                        '<em>{city_or_bank}:</em> {CITY_UE}\n\n' \
                                        '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_UE}\n' \
                                        '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(OPER_NAME_UE=data.get('OPER_NAME_UE'),
                                                                                                        USDT_EURO_RATE=data['USDT_EURO_RATE'],
                                                                                                        SUM_EUR_UE=data['SUM_EUR_UE'],
                                                                                                        SUM_USDT_UE=data['SUM_USDT_UE'],
                                                                                                        CITY_UE=data['CITY_UE'],
                                                                                                        ORDER_TIME_UE=data['ORDER_TIME_UE'],
                                                                                                        currency=currency,
                                                                                                        city_or_bank=city_or_bank,
                                                                                                        currency1=currency1)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                b1 = types.KeyboardButton(_('–î–∞'))
                b2 = types.KeyboardButton(_('–ù–µ—Ç'))
                markup.add(b1, b2)
                client_warning_mess = _(
                    '<b>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –∑–∞—è–≤–∫—É, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π' \
                    ' –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <em>/documents</em></b>\n\n')
                bot.send_message(message.chat.id, disc_status_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(message.chat.id, client_order_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
            elif data.get('FIND_USER_FLAG') and message.text not in ACTIVE_CONTACT_LIST and (data.get('FORM_ORDER_FLAG')) and (data.get('OPER_FLAG_USDT_EURO')) and (
                    not data.get('OPER_FLAG_EUR_RUB')) \
                    and (data.get('CITY_UE_FLAG')) and (data.get('SUM_USDT_FLAG')) and (data.get('ORDER_TIME_FLAG_UE')) and (data.get('FRIEND_REF_FLAG_UE')) and (
                    not data.get('ORDER_CONFIRM_UE_FLAG')):
                if not data.get('NAME_FLAG'):
                    data['NAME_FLAG'] = True
                    add_username = message.text
                    mess = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–º—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã.')
                    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                elif data.get('NAME_FLAG'):
                    data['NAME_FLAG'] = False
                    data['RES_ORDER_FLAG_UE'] = True
                    data['ORDER_CONFIRM_UE_FLAG'] = True
                    username = '@' + message.chat.username if message.chat.username is not None else 'None'
                    existed_disc_codes = [one_doc['Discount_Number'] for one_doc in ACTIVE_CONTACT_LIST.values()]
                    existed_ref_codes = [one_doc['Referral_Number'] for one_doc in ACTIVE_CONTACT_LIST.values() if 'Referral_Number' in one_doc]
                    while True:
                        s = string.ascii_lowercase + string.ascii_uppercase + string.digits
                        disc_code = ''.join(random.sample(s, 4))
                        if disc_code not in existed_disc_codes:
                            break
                    while True:
                        ref_code = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
                        if ref_code not in existed_ref_codes:
                            break
                    write_contact(TG_Contact=add_username, user_ID='', NameSurname=message.text, AccTypeFROM='', CurrFROM='USDT', 
                                  City=data['CITY_UE'], ContactType='–ö–ª–∏–µ–Ω—Ç', ContactDealer=username, CurrStatus='–ê–∫—Ç–∏–≤–Ω—ã–π',
                                  Discount_Number=disc_code, Referral_Number=ref_code)
                    disc_status_mess = _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.\n' \
                                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b><em>{add_username}</em></b> (–¥–∏—Å–∫–æ–Ω—Ç–Ω—ã–π –∫–æ–¥: {disc_code})').format(
                                                                                                                                            add_username=add_username,
                                                                                                                                            disc_code=disc_code)
                    if data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'):
                        currency = '–µ–≤—Ä–æ' 
                        currency1 = 'EUR' 
                    elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                        currency = '–≥—Ä–∏–≤–Ω–∞—Ö'
                        currency1 = 'UAH' 
                    elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                        currency = '—Ç–µ–Ω–≥–µ'
                        currency1 = 'KZT' 
                    else:
                        currency = '—Ä—É–±–ª—è—Ö'
                        currency1 = 'RUB'
                    city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è') if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï') else _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                    if data.get('CASH_FLAG'):
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                            '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_UE}\n' \
                                            '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (USDT/{currency1}):</em> {USDT_EURO_RATE}\n' \
                                            '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency}:</em> {SUM_EUR_UE}\n' \
                                            '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ USDT:</em> {SUM_USDT_UE}\n' \
                                            '<em>{city_or_bank}:</em> {CITY_UE}\n' \
                                            '<em>–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {CASH_CITY}\n' \
                                            '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_UE}\n\n' \
                                            '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(OPER_NAME_UE=data.get('OPER_NAME_UE'),
                                                                                                            USDT_EURO_RATE=data['USDT_EURO_RATE'],
                                                                                                            SUM_EUR_UE=data['SUM_EUR_UE'],
                                                                                                            SUM_USDT_UE=data['SUM_USDT_UE'],
                                                                                                            CITY_UE=data['CITY_UE'],
                                                                                                            ORDER_TIME_UE=data['ORDER_TIME_UE'],
                                                                                                            currency=currency,
                                                                                                            CASH_CITY=data['CASH_CITY'],
                                                                                                            city_or_bank=city_or_bank,
                                                                                                            currency1=currency1 )
                    else:
                        client_order_mess = _('<b>–ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b>\n' \
                                            '<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> {OPER_NAME_UE}\n' \
                                            '<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (USDT/{currency1}):</em> {USDT_EURO_RATE}\n' \
                                            '<em>–°—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤ {currency}:</em> {SUM_EUR_UE}\n' \
                                            '<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ USDT:</em> {SUM_USDT_UE}\n' \
                                            '<em>{city_or_bank}:</em> {CITY_UE}\n\n' \
                                            '<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {ORDER_TIME_UE}\n' \
                                            '<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?</b>\n<em>(–î–∞/–ù–µ—Ç)</em>\n').format(OPER_NAME_UE=data.get('OPER_NAME_UE'),
                                                                                                            USDT_EURO_RATE=data['USDT_EURO_RATE'],
                                                                                                            SUM_EUR_UE=data['SUM_EUR_UE'],
                                                                                                            SUM_USDT_UE=data['SUM_USDT_UE'],
                                                                                                            CITY_UE=data['CITY_UE'],
                                                                                                            ORDER_TIME_UE=data['ORDER_TIME_UE'],
                                                                                                            currency=currency,
                                                                                                            city_or_bank=city_or_bank,
                                                                                                            currency1=currency1)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                    b1 = types.KeyboardButton(_('–î–∞'))
                    b2 = types.KeyboardButton(_('–ù–µ—Ç'))
                    markup.add(b1, b2)
                    client_warning_mess = _(
                        '<b>–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –∑–∞—è–≤–∫—É, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π' \
                        ' –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <em>/documents</em></b>\n\n')
                    bot.send_message(message.chat.id, disc_status_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                    bot.send_message(message.chat.id, client_order_mess, parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                    bot.send_message(message.chat.id, client_warning_mess, parse_mode='html', reply_markup=markup)
            # 2.2.5
            elif message.text == _('–î–∞') and data.get('FORM_ORDER_FLAG') and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('SUM_USDT_FLAG') and data.get('CITY_UE_FLAG') and data.get('ORDER_CONFIRM_UE_FLAG'):
                #ACTIVE_CONTACT_LIST = scrab_contact_list()
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                a = types.ReplyKeyboardRemove()
                if add_username == '':
                    from_id = message.from_user.id
                    first_name = message.from_user.first_name
                    username = '@' + message.chat.username if message.chat.username is not None else '-'
                else:
                    if 'user_ID' in ACTIVE_CONTACT_LIST[add_username].keys():
                        from_id = ACTIVE_CONTACT_LIST[add_username]['user_ID']
                    else:
                        from_id = '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                    first_name = ACTIVE_CONTACT_LIST[add_username]['NameSurname']
                    username = add_username
                    data['REF_CODE_UE'] = ACTIVE_CONTACT_LIST[username]['Discount_Number']
                dealer = ACTIVE_CONTACT_LIST[username]['ContactDealer']
                client_mess = _('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {ContactDealer}.').format(
                    ContactDealer=dealer
                )
                date = datetime.now(tz).strftime('%d.%m.%Y')
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'r', encoding='utf8') as f:
                    DealID_num = json.load(f)
                    DealID_num["EX"] += 0.0000001
                    DealID = "EX" + (str(format(DealID_num["EX"], '.7f'))).replace('.','')
                with open('C:/Users/admin/PycharmProjects/BotMain_v4_Monex/app/deals_ids.json', 'w', encoding='utf8') as f:
                    json.dump(DealID_num, f, ensure_ascii=False, indent=2)
                # date = datetime.utcfromtimestamp(message.json['date']).strftime('%Y-%m-%d %H:%M:%S')
                # TODO: –ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨?
                if data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û'):
                    currency = '–µ–≤—Ä–æ' 
                    currency1 = 'EUR' 
                elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    currency = '–≥—Ä–∏–≤–Ω–∞—Ö'
                    currency1 = 'UAH' 
                elif data.get('OPER_NAME_UE')==_('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    currency = '—Ç–µ–Ω–≥–µ'
                    currency1 = 'KZT' 
                else:
                    currency = '—Ä—É–±–ª—è—Ö'
                    currency1 = 'RUB'
                city_or_bank = _('–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è') if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´') or data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï') else _('–ì–æ—Ä–æ–¥ —Å–¥–µ–ª–∫–∏')
                data['CASH_CITY'] = data['CASH_CITY'] if data.get('CASH_FLAG') else ''
                operator_mess = '<em>–ò—Å—Ç–æ—á–Ω–∏–∫:</em> Alpha_TG_Bot\n' \
                                f'<em>–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞:</em> {DealID}\n' \
                                f'<em>{city_or_bank}:</em> <b>#{data["CITY_UE"]}</b>\n' \
                                f'<em>–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç –≤ {currency}:</em> <b>{data["SUM_EUR_UE"]}</b>\n' \
                                f'<em>–ë–ª–æ–∫—á–µ–π–Ω:</em> <b>{data["BLOCKCHAIN"]}</b>\n' \
                                f'<em>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</em> {data["ADDRESS"]}\n' \
                                f'<em>–°—Ç–∞—Ç—É—Å –∫–æ—à–µ–ª—å–∫–∞:</em> {data["RISK_TRC"]}\n' \
                                f'<em>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</em> {first_name}\n' \
                                f'<em>ID –∫–ª–∏–µ–Ω—Ç–∞:</em> {from_id}\n' \
                                f'<em>–ö–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:</em> {data["REF_CODE_UE"]}\n' \
                                f'<em>–ù–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞:</em> {username}\n' \
                                f'<em>–í–∞–ª—é—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</em> <b>{data.get("OPER_NAME_UE")}</b>\n' \
                                f'<em>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –∫—É—Ä—Å (USDT/{currency1}):</em> {data["USDT_EURO_RATE"]}\n' \
                                f'<em>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ USDT:</em> {data["SUM_USDT_UE"]}\n' \
                                f'<em>–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–Ω—ã—Ö:</em> {data["CASH_CITY"]}\n' \
                                f'<em>–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏:</em> {data["ORDER_TIME_UE"]}\n' \
                                f'<em>–í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:</em> {date}\n' \
                                f'<em>–ö—Ç–æ —Å–≤—è–∂–µ—Ç—Å—è –ø–æ –æ–±–º–µ–Ω—É:</em> {dealer}'
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, client_mess, parse_mode='html', reply_markup=markup)
                bot.send_message(GROUP_CHAT_ID, operator_mess, parse_mode='html', reply_markup=a)
                if data.get('OPER_NAME_UE') ==_('–û–±–º–µ–Ω USDT –Ω–∞ –ï–í–†–û') and int(data['SUM_EUR_UE']) < 1000 or data.get('OPER_NAME_UE') ==_('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') and int(data['SUM_EUR_UE']) < 100000 or data.get('OPER_NAME_UE') ==_('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') and int(data['SUM_EUR_UE']) < 40000:
                    client_mess1 = _('–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–º–µ–Ω–∞ –¥–ª—è —Å—É–º–º –æ–±–º–µ–Ω–∞ –º–µ–Ω–µ–µ 1000 –µ–≤—Ä–æ'
                                     ' –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–º –¥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è. –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å'
                                     ' –≤–æ–ø—Ä–æ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–µ–Ω–µ–≥ –∫—É—Ä–∞—Ç–æ—Ä–æ–º –∏/–∏–ª–∏ –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ª–∏—á–Ω–æ–π –±–µ—Å–µ–¥–µ –≤ –¢–ì.')
                    bot.send_message(message.chat.id, client_mess1, parse_mode='html', reply_markup=markup)
                dealer = ACTIVE_CONTACT_LIST[username]['ContactDealer']
                if len(data.get('REF_CODE_UE')) != 6:
                    partner = ''
                    partner_flag = False
                else:
                    for tg_nick, values in ACTIVE_CONTACT_LIST.items():
                        if values['Referral_Number'] == data.get('REF_CODE_UE'):
                            partner = tg_nick
                            partner_flag = True
                            break
                usdt_eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                if data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò'):
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>RUB', 'RUB=>USDT', 'RUB', data['SUM_EUR_UE'], data['CITY_UE'], '', data['USDT_EURO_RATE'], '/',
                            'USDT', '–ù–∞–ª–∏—á–Ω—ã–µ', '', username, data['REF_CODE_UE'], '', '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', '', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>RUB', 'RUB=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'], '/',
                            'RUB', data['CITY_UE'], '', '', '', '', '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', 'rubeur', '', '', '', '')
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>RUB', 'RUB=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'],
                            '/', 'USDT', '–ù–∞–ª–∏—á–Ω—ã–µ', '', '', '', '', 'NEW', '', '', '', '', '',
                            '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', 'rubeur3', 'VPR in 3', '', '', '')
                    eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                    calculate_indexes(deal_type='EU', partner_flag=partner_flag, eur_rate=eur_rate)
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –ì–†–ò–í–ù–´'):
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>UAH', 'UAH=>USDT', 'UAH', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '',
                            data['USDT_EURO_RATE'], '/',
                            'USDT', 'Binance', '', username, data['REF_CODE_UE'], data['CITY_UE'], '', '', '', '', '', '',
                            '', '–ü–ª–∞–Ω', '', '','', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>UAH', 'UAH=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'], '/',
                            'UAH', data['CITY_UE'], '', '', '', '', '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', 'rubeur', '', '', '', '')
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>UAH', 'UAH=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'],
                            '/', 'USDT', '–ù–∞–ª–∏—á–Ω—ã–µ', '', '', '', '', 'NEW', '', '', '', '', '',
                            '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', 'rubeur3', 'VPR in 3', '', '', '')
                    eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                    calculate_indexes(deal_type='UU', partner_flag=partner_flag, eur_rate=eur_rate)
                elif data.get('OPER_NAME_UE') == _('–û–±–º–µ–Ω USDT –Ω–∞ –¢–ï–ù–ì–ï'):
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>KZT', 'KZT=>USDT', 'KZT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '',
                            data['USDT_EURO_RATE'], '/',
                            'USDT', 'Binance', '', username, data['REF_CODE_UE'], data['CITY_UE'], '', '', '', '', '', '',
                            '', '–ü–ª–∞–Ω', '', '','', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>KZT', 'KZT=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'], '/',
                            'KZT', data['CITY_UE'], '', '', '', '', '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', 'rubeur', '', '', '', '')
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>KZT', 'KZT=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'],
                            '/', 'USDT', '–ù–∞–ª–∏—á–Ω—ã–µ', '', '', '', '', 'NEW', '', '', '', '', '',
                            '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', 'rubeur3', 'VPR in 3', '', '', '')
                    eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                    calculate_indexes(deal_type='UU', partner_flag=partner_flag, eur_rate=eur_rate)
                else:
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>EUR', 'EUR=>USDT', 'EUR', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '',
                            data['USDT_EURO_RATE'], '/',
                            'USDT', 'Binance', '', username, data['REF_CODE_UE'], data['CITY_UE'], '', '', '', '', '', '',
                            '', '–ü–ª–∞–Ω', '', '','', '', True, usdt_eur_rate, 1/usdt_eur_rate)
                    #add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>EUR', 'EUR=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'], '/',
                    #        'EUR', data['CITY_UE'], '', '', '', '', '', '', '', '', '', '', '', '–ü–ª–∞–Ω', '', '', 'rubeur', '')
                    add_row(DealID, date, date, 'Alpha_TG_Bot', partner, 'USDT=>EUR', 'EUR=>USDT', 'USDT', data['SUM_EUR_UE'], '–ù–∞–ª–∏—á–Ω—ã–µ', '', data['USDT_EURO_RATE_GS'],
                            '/', 'USDT', '–ù–∞–ª–∏—á–Ω—ã–µ', '', '', '', '', 'VPR', '', '', '', '', '',
                            '', '–†–∞—Å—á–ë–æ–Ω–ü–ª–∞–Ω', '', '', 'rubeur2', 'VPR in 2', '', '', '')  # –¥–æ–±–∞–≤–∏—Ç—å Binance, –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞(–æ–≤) + –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                    eur_rate = rates_funcs.scrab_usdt_euro_rate(username, 1)
                    calculate_indexes(deal_type='UE', partner_flag=partner_flag, eur_rate=eur_rate)
                add_border()
                #update_contact(username=username, city=data['CITY_UE'], acc_type_from=BLOCKCHAIN, curr_from='USDT')
            # 2.2.6
            elif message.text == _('–ù–µ—Ç') and data.get('FORM_ORDER_FLAG') and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('SUM_USDT_FLAG') and data.get('CITY_UE_FLAG') and data.get('ORDER_CONFIRM_UE_FLAG'):
                data['PENDING_ORDER_FLAG'] = True
                a = types.ReplyKeyboardRemove()
                mess = _('<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä!</b>\n' \
                        '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å –∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                b1 = types.KeyboardButton(_('–°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä'))
                b2 = types.KeyboardButton(_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
                markup.add(b1, b2)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä (–æ—Ç–∫–∞–∑)
            elif message.text == _('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') and data.get('FORM_ORDER_FLAG') and (not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('SUM_USDT_FLAG') and data.get('CITY_UE_FLAG') and data.get('ORDER_CONFIRM_UE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                data['PENDING_ORDER_FLAG'] = False
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, text=_('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é'), parse_mode='html',
                                reply_markup=markup)
            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
            elif message.text == _('–°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä') and data.get('FORM_ORDER_FLAG') and (not data.get('OPER_FLAG_EUR_RUB')) and (
                    data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('SUM_USDT_FLAG') and data.get('CITY_UE_FLAG') and data.get('ORDER_CONFIRM_UE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                a = types.ReplyKeyboardRemove()
                mess = _('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–µ–ª–∞–µ–º—ã–π –∫—É—Ä—Å —Å–¥–µ–ª–∫–∏.')
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            # –í–≤–æ–¥ –∂–µ–ª–∞–µ–º–æ–≥–æ –∫—É—Ä—Å–∞
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            elif not message.text.replace(".", "").replace(",", "").isnumeric() and data.get('FORM_ORDER_FLAG') and (
                    not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('SUM_USDT_FLAG') and data.get('CITY_UE_FLAG') and data.get('ORDER_CONFIRM_UE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                a = types.ReplyKeyboardRemove()
                mess = _(
                    '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫—É—Ä—Å, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n' \
                    '<b><em>–í–≤–æ–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±—É–∫–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è</em></b>.\n' \
                    '<em>–ï—Å–ª–∏ –≤–≤–µ–ª–∏/–≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /form_order</em>')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=a)
            # –ö—É—Ä—Å –≤–≤–µ–¥–µ–Ω
            elif message.text.replace(".", "").replace(",", "").isnumeric() and data.get('FORM_ORDER_FLAG') and (
                    not data.get('OPER_FLAG_EUR_RUB')) and (data.get('OPER_FLAG_USDT_EURO')) \
                    and data.get('SUM_USDT_FLAG') and data.get('CITY_UE_FLAG') and data.get('ORDER_CONFIRM_UE_FLAG') and data.get('PENDING_ORDER_FLAG'):
                data['PENDING_ORDER_FLAG'] = False
                a = types.ReplyKeyboardRemove()
                client_mess = _('–í–∞—à –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω. –ú—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!')
                from_id = message.from_user.id
                first_name = message.from_user.first_name
                username = '@' + message.chat.username if message.chat.username is not None else '-'
                date = datetime.now(tz).strftime('%d.%m.%Y')
                # date = datetime.utcfromtimestamp(message.json['date']).strftime('%Y-%m-%d %H:%M:%S')
                with open('contacts.json', 'r', encoding='utf8') as f:
                    ACTIVE_CONTACT_LIST = json.load(f)
                dealer = ACTIVE_CONTACT_LIST[username]['ContactDealer']
                deal_type = 'USDT=>RUB' if data.get('OPER_NAME_UE') ==_('–û–±–º–µ–Ω USDT –Ω–∞ –†–£–ë–õ–ò') else 'USDT=>EUR'
                write_pending_order(createDateTime=date, dealer=dealer, dealType=deal_type, exchFROM_Amount=data['SUM_EUR_UE'],
                                    orderRate=message.text.replace(".", ","), user_ID=message.from_user.id,
                                    tg_Contact=username, city=data['CITY_UE'], currStatus='–°–æ–∑–¥–∞–Ω', chat_ID=message.chat.id, )
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                markup.add(*menu_buttons)
                bot.send_message(message.chat.id, client_mess, parse_mode='html', reply_markup=markup)
            # else:
            #    a = types.ReplyKeyboardRemove()
            #    mess = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—á–Ω—è –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.'
            #    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            #    menu_buttons = form_menu_buttons(MAIN_MENU_BUTTONS)
            #    markup.add(*menu_buttons)
            #    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)
    def form_menu_buttons(MAIN_MENU_BUTTONS):
        button_list = []
        for button in MAIN_MENU_BUTTONS:
            b = types.KeyboardButton(button)
            button_list.append(b)
        return button_list
    def form_order_city_buttons(CITY_BUTTONS):
        '''
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å–¥–µ–ª–∫–∏
        '''
        return [types.KeyboardButton(button) for button in CITY_BUTTONS]
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    # bot.polling(none_stop=True)
    # bot.infinity_polling(True)
    #except Exception as e:
        #print('Exception: ' + str(e))
        #os.system('python main copy.py')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
    def check_pending_orders(bot):
        def run_func():
            CREDENTIALS_FILE = r'files/cryptoproject-376121-0ee14403b31d.json'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å –∑–∞–∫—Ä—ã—Ç—ã–º –∫–ª—é—á–æ–º, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ
            # –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
            credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE,
                                                                        ['https://www.googleapis.com/auth/spreadsheets',
                                                                            'https://www.googleapis.com/auth/drive'])
            httpAuth = credentials.authorize(httplib2.Http())  # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
            service = apiclient.discovery.build('sheets', 'v4', http=httpAuth)  # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ 4 –≤–µ—Ä—Å–∏—é API
            sheet_id = '1156rEolgYH-TmuXgR-yAI-URbme_ZkZyzyz9w_fcWFU'
            resp = service.spreadsheets().values().get(spreadsheetId=sheet_id,
                                                    range="–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã!C2:1000000").execute()
            rows = resp['values']
            headers = rows.pop(0)
            pending_orders = [dict(zip(headers, one_row)) for one_row in rows]
            currency_rate = rates_funcs.get_rates_data('username', '')
            currency_rate_buy = rates_funcs.get_rates_buy_eur_data(currency_from='EUR_RUB', bank_name='', username='username')
            usdt_eur_rate = rates_funcs.compute_usdt_euro_amount(1, 'username')
            usdt_rub_rate = rates_funcs.compute_usdt_rub_amount(1, 'username', False, '')
            for row_index, order in enumerate(pending_orders):
                if order['CurrStatus'] == '–°–æ–∑–¥–∞–Ω' and (order['City'] != '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏' and (
                        order['DealType'] == 'EUR=>RUB' and (
                        float(order['ExchFROM_Amount']) < 50000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate_buy[49999] or \
                        499 < float(order['ExchFROM_Amount']) < 100000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate_buy[99999] or \
                        999 < float(order['ExchFROM_Amount']) < 300000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate_buy[299999] or \
                        2999 < float(order['ExchFROM_Amount']) < 1000000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate_buy[999999] or \
                        9999 < float(order['ExchFROM_Amount']) and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate_buy[1000001]) or \
                        order['DealType'] == 'RUB=>EUR' and (
                        float(order['ExchFROM_Amount']) < 500 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[499] or \
                        499 < float(order['ExchFROM_Amount']) < 1000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[999] or \
                        999 < float(order['ExchFROM_Amount']) < 3000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[2999] or \
                        2999 < float(order['ExchFROM_Amount']) < 10000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[9999] or \
                        9999 < float(order['ExchFROM_Amount']) and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[10001]) or \
                        order['DealType'] == 'RUB=>KZT' and (
                        float(order['ExchFROM_Amount']) < 250000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[249999] or \
                        249999 < float(order['ExchFROM_Amount']) < 500000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[499999] or \
                        499999 < float(order['ExchFROM_Amount']) < 1500000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[1499999] or \
                        1499999 < float(order['ExchFROM_Amount']) < 5000000 and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[4999999] or \
                        4999999 < float(order['ExchFROM_Amount']) and float(order['OrderRate'].replace(',', '.')) >=
                        currency_rate[5000000]) or \
                        order['DealType'] == 'USDT=>EUR' and (
                                float(order['ExchFROM_Amount']) < 5000 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_eur_rate['low_rate'] or \
                                float(order['ExchFROM_Amount']) > 4999 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_eur_rate['high_rate'])) or \
                        order['DealType'] == 'USDT=>RUB' and (
                                float(order['ExchFROM_Amount']) < 500000 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_rub_rate['low_rate'] or \
                                float(order['ExchFROM_Amount']) > 499999 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_rub_rate['high_rate']) or \
                        order['DealType'] == 'USDT=>UAH' and (
                                float(order['ExchFROM_Amount']) < 200000 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_rub_rate['low_rate'] or \
                                float(order['ExchFROM_Amount']) > 199999 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_rub_rate['high_rate']) or \
                        order['DealType'] == 'USDT=>KZT' and (
                                float(order['ExchFROM_Amount']) < 2500000 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_rub_rate['low_rate'] or \
                                float(order['ExchFROM_Amount']) > 2499999 and float(order['OrderRate'].replace(',', '.')) <=
                                usdt_rub_rate['high_rate']) or \
                                                        order['City'] == '–•–µ—Ä—Ü–µ–≥ –ù–æ–≤–∏' and (
                                                                order['DealType'] == 'RUB=>EUR' and (
                                                                float(order['ExchFROM_Amount']) < 500 and float(
                                                            order['OrderRate'].replace(',', '.')) >= currency_rate[
                                                                    499] + 1 or \
                                                                499 < float(order['ExchFROM_Amount']) < 1000 and float(
                                                            order['OrderRate'].replace(',', '.')) >= currency_rate[
                                                                    999] + 1 or \
                                                                999 < float(order['ExchFROM_Amount']) < 3000 and float(
                                                            order['OrderRate'].replace(',', '.')) >= currency_rate[
                                                                    2999] + 1 or \
                                                                2999 < float(order['ExchFROM_Amount']) < 10000 and float(
                                                            order['OrderRate'].replace(',', '.')) >= currency_rate[
                                                                    9999] + 1 or \
                                                                9999 < float(order['ExchFROM_Amount']) and float(
                                                            order['OrderRate'].replace(',', '.')) >= currency_rate[
                                                                    10001] + 1) or \
                                                                order['DealType'] == 'USDT=>EUR' and (
                                                                        float(order['ExchFROM_Amount']) < 5000 and float(
                                                                    order['OrderRate'].replace(',', '.')) <= usdt_eur_rate[
                                                                            'low_rate'] - 0.005 or \
                                                                        float(order['ExchFROM_Amount']) > 4999 and float(
                                                                    order['OrderRate'].replace(',', '.')) <= usdt_eur_rate[
                                                                            'high_rate'] - 0.005) or \
                                                                order['DealType'] == 'USDT=>EUR' and (
                                                                        float(order['ExchFROM_Amount']) < 500000 and float(
                                                                    order['OrderRate'].replace(',', '.')) <= usdt_rub_rate[
                                                                            'low_rate'] - 0.005 or \
                                                                        float(order['ExchFROM_Amount']) > 499999 and float(
                                                                    order['OrderRate'].replace(',', '.')) <= usdt_rub_rate[
                                                                            'high_rate'] - 0.005))):
                    # TODO: –ù–ï –ü–ï–†–ï–í–û–î–ò–¢–¨?
                    mess = '<em>–ò—Å—Ç–æ—á–Ω–∏–∫:</em> Alpha_TG_Bot\n' \
                        f'<b>–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –æ—Ç {order["CreateDateTime"]} </b> \n' \
                        f'<em>–¢–∏–ø —Å–¥–µ–ª–∫–∏:</em> {order["DealType"]}\n' \
                        f'<em>–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫—É—Ä—Å:</em> {order["OrderRate"]}\n' \
                        f'<em>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:</em> {order["ExchFROM_Amount"]}\n' \
                        f'<em>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</em> {order["TG_Contact"]}\n' \
                        f'<em>ID —á–∞—Ç–∞:</em> {order["Chat_ID"]}\n'
                    bot.send_message(GROUP_CHAT_ID, text=mess, parse_mode='html')
                    # TODO: –ò–∑–º–µ–Ω–∏—Ç—å message.from_user.id
                    _ = get_user_translator(order['user_ID'])
                    client_mess = _('<b>–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä –æ—Ç {CreateDateTime} </b> \n' \
                                    '<em>–¢–∏–ø —Å–¥–µ–ª–∫–∏:</em> {DealType}\n' \
                                    '<em>–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫—É—Ä—Å:</em> {OrderRate}\n' \
                                    '<em>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:</em> {amount}\n\n' \
                                    '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—è–≤–∫—É –≤ –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é:\n <em>üîÅ –û–±–º–µ–Ω –ø–æ –∑–∞—è–≤–∫–µ. /form_order</em>').format(
                        CreateDateTime=order["CreateDateTime"],
                        DealType=order["DealType"],
                        OrderRate=order["OrderRate"],
                        amount=order["ExchFROM_Amount"])
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
                    menu_buttons = form_menu_buttons(_(MAIN_MENU_BUTTONS))
                    markup.add(*menu_buttons)
                    bot.send_message(order["Chat_ID"], client_mess, parse_mode='html', reply_markup=markup)
                    results = service.spreadsheets().values().batchUpdate(spreadsheetId=sheet_id, body={
                        "valueInputOption": "USER_ENTERED",
                        # –î–∞–Ω–Ω—ã–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –∫–∞–∫ –≤–≤–æ–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª)
                        "data": [
                            {"range": f"–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã!K{row_index + 3}:10000",
                            "majorDimension": "ROWS",  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–∏, –∑–∞—Ç–µ–º —Å—Ç–æ–ª–±—Ü—ã
                            "values": [
                                ['–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'],  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                            ]}
                        ]
                    }).execute()
        return run_func
    def write_usdrub_eurrub():
        rates = rates_funcs.get_fiat_rates_tradingview()
        USD_RUB, EUR_RUB, EUR_USD, EUR_UAH, USD_UAH, USD_KZT, EUR_KZT, RSD_USD, RSD_EUR, USD_EUR = rates['USD_RUB'], rates['EUR_RUB'], rates['EUR_USD'], rates['EUR_UAH'], rates['USD_UAH'], rates['USD_KZT'], rates['EUR_KZT'], rates['RSD_USD'], rates['RSD_EUR'], rates['USD_EUR']
        gs_write_usdrub_eurrub(USD_RUB, USD_UAH, 1/RSD_USD, USD_KZT, EUR_RUB, EUR_UAH, EUR_KZT, 1/RSD_EUR, EUR_USD, USD_EUR)
    my_func1 = write_usdrub_eurrub
    my_func2 = get_last_trans
    my_func3 = scrab_contact_list
    my_func5 = write_update_contacts
    # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    my_func = check_pending_orders(bot)
    scheduler = BackgroundScheduler({'apscheduler.job_defaults.max_instances': 3, 'apscheduler.timezone': 'Europe/Podgorica'})
    #scheduler = BlockingScheduler({'apscheduler.job_defaults.max_instances': 3})
    job1 = scheduler.add_job(my_func1, 'cron', hour=19, minute=58)
    job2 = scheduler.add_job(my_func2, 'interval', days=1)
    job3 = scheduler.add_job(my_func3, 'interval', minutes=3)
    #job5 = scheduler.add_job(my_func5, 'interval', hours=3.1)
    job = scheduler.add_job(my_func, 'interval', hours=12)
    scheduler.start()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    bot.polling(none_stop=True)
    bot.infinity_polling(True)
except Exception as e:
    print('Exception: ' + str(e))
    traceback.print_exc()
    os.system(r'python C:\Users\admin\PycharmProjects\BotMain_v5_Alpha\app\main.py')